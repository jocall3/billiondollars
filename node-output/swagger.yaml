{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Modern Treasury",
    "description" : "The Modern Treasury REST API. Please see https://docs.moderntreasury.com for more details.",
    "contact" : {
      "name" : "Modern Treasury Engineering Team",
      "url" : "https://moderntreasury.com"
    },
    "version" : "v1"
  },
  "servers" : [ {
    "url" : "https://virtserver.swaggerhub.com/jocall3/Citibank-demo/v1",
    "description" : "SwaggerHub API Auto Mocking"
  }, {
    "url" : "http://localhost:3000"
  }, {
    "url" : "https://app.moderntreasury.com"
  } ],
  "paths" : {
    "/api/{accounts_type}/{account_id}/account_details" : {
      "get" : {
        "tags" : [ "AccountDetail" ],
        "summary" : "list account_details",
        "description" : "Get a list of account details for a single internal or external account.",
        "operationId" : "listAccountDetails",
        "parameters" : [ {
          "name" : "accounts_type",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "external_accounts", "internal_accounts" ]
          }
        }, {
          "name" : "account_id",
          "in" : "path",
          "description" : "The ID of the account.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/account_detail"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "AccountDetail" ],
        "summary" : "create account_detail",
        "description" : "Create an account detail for an external account.",
        "operationId" : "createAccountDetail",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accounts_type",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "external_accounts" ]
          }
        }, {
          "name" : "account_id",
          "in" : "path",
          "description" : "The ID of the account.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/account_detail_create_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/account_detail"
                }
              }
            }
          },
          "404" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/{accounts_type}/{account_id}/account_details/{id}" : {
      "get" : {
        "tags" : [ "AccountDetail" ],
        "summary" : "get account_detail",
        "description" : "Get a single account detail for a single internal or external account.",
        "operationId" : "getAccountDetail",
        "parameters" : [ {
          "name" : "accounts_type",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "external_accounts", "internal_accounts" ]
          }
        }, {
          "name" : "account_id",
          "in" : "path",
          "description" : "The ID of the account.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the account detail.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/account_detail"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "AccountDetail" ],
        "summary" : "delete account_detail",
        "description" : "Delete a single account detail for an external account.",
        "operationId" : "deleteAccountDetail",
        "parameters" : [ {
          "name" : "accounts_type",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "external_accounts" ]
          }
        }, {
          "name" : "account_id",
          "in" : "path",
          "description" : "The ID of the account.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the account detail.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "successful"
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/internal_accounts/{internal_account_id}/balance_reports" : {
      "get" : {
        "tags" : [ "BalanceReport" ],
        "summary" : "list balance_reports",
        "description" : "Get all balance reports for a given internal account.",
        "operationId" : "listBalanceReports",
        "parameters" : [ {
          "name" : "internal_account_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "as_of_date",
          "in" : "query",
          "description" : "The date of the balance report in local time.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "balance_report_type",
          "in" : "query",
          "description" : "The specific type of balance report. One of `intraday`, `previous_day`, `real_time`, or `other`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "intraday", "other", "previous_day", "real_time" ]
          }
        }, {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/balance_report"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/internal_accounts/{internal_account_id}/balance_reports/{id}" : {
      "get" : {
        "tags" : [ "BalanceReport" ],
        "summary" : "get balance_report",
        "description" : "Get a single balance report for a given internal account.",
        "operationId" : "getBalanceReport",
        "parameters" : [ {
          "name" : "internal_account_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Either the unique identifier of the balance report or latest for the latest balance report.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/balance_report"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/connections" : {
      "get" : {
        "tags" : [ "Connection" ],
        "summary" : "list connections",
        "description" : "Get a list of all connections.",
        "operationId" : "listConnections",
        "parameters" : [ {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "vendor_customer_id",
          "in" : "query",
          "description" : "An identifier assigned by the vendor to your organization.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "entity",
          "in" : "query",
          "description" : "A string code representing the vendor (i.e. bank).",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/connection"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/counterparties/{id}/collect_account" : {
      "post" : {
        "tags" : [ "Counterparty" ],
        "summary" : "collect account details",
        "description" : "Send an email requesting account details.",
        "operationId" : "collectAccountDetails",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "counterparty id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/counterparty_collect_account_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/counterparty_collect_account_response"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/counterparties" : {
      "get" : {
        "tags" : [ "Counterparty" ],
        "summary" : "list counterparties",
        "description" : "Get a paginated list of all counterparties.",
        "operationId" : "listCounterparties",
        "parameters" : [ {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Performs a partial string match of the name field. This is also case insensitive.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "email",
          "in" : "query",
          "description" : "Performs a partial string match of the email field. This is also case insensitive.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "email"
          }
        }, {
          "name" : "metadata",
          "in" : "query",
          "description" : "For example, if you want to query for records with metadata key `Type` and value `Loan`, the query would be `metadata%5BType%5D=Loan`. This encodes the query parameters.",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "created_at_lower_bound",
          "in" : "query",
          "description" : "Used to return counterparties created after some datetime.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "created_at_upper_bound",
          "in" : "query",
          "description" : "Used to return counterparties created before some datetime.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/counterparty"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad_request"
          },
          "401" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Counterparty" ],
        "summary" : "create counterparty",
        "description" : "Create a new counterparty.",
        "operationId" : "createCounterparty",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/counterparty_create_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/counterparty"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "415" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/counterparties/{id}" : {
      "get" : {
        "tags" : [ "Counterparty" ],
        "summary" : "show counterparty",
        "description" : "Get details on a single counterparty.",
        "operationId" : "getCounterparty",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of an existing counterparty.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/counterparty"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Counterparty" ],
        "summary" : "delete counterparty",
        "description" : "Deletes a given counterparty.",
        "operationId" : "deleteCounterparty",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of an existing counterparty.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "successful"
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "Counterparty" ],
        "summary" : "update counterparty",
        "description" : "Updates a given counterparty with new information.",
        "operationId" : "updateCounterparty",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of an existing counterparty.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/counterparty_update_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/counterparty"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/documents" : {
      "get" : {
        "tags" : [ "Document" ],
        "summary" : "list documents",
        "description" : "Get a list of documents.",
        "operationId" : "listDocuments",
        "parameters" : [ {
          "name" : "documentable_id",
          "in" : "query",
          "description" : "The unique identifier for the associated object.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "documentable_type",
          "in" : "query",
          "description" : "The type of the associated object. Currently can be one of `payment_order`, `transaction`, `paper_item`, `expected_payment`, `counterparty`, `organization`, `case`, `internal_account`, `decision`, or `external_account`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "cases", "counterparties", "expected_payments", "external_accounts", "internal_accounts", "organizations", "paper_items", "payment_orders", "transactions", "decisions", "connections" ]
          }
        }, {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/document"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Document" ],
        "summary" : "create document",
        "description" : "Create a document.",
        "operationId" : "createDocument",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/document_create_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/document"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/{documentable_type}/{documentable_id}/documents" : {
      "get" : {
        "tags" : [ "Document" ],
        "summary" : "list documents - nested path (legacy)",
        "description" : "Get a list of documents.",
        "operationId" : "listDocuments",
        "parameters" : [ {
          "name" : "documentable_id",
          "in" : "path",
          "description" : "The unique identifier for the associated object.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "documentable_type",
          "in" : "path",
          "description" : "The type of the associated object. Currently can be one of `payment_order`, `transaction`, `paper_item`, `expected_payment`, `counterparty`, `organization`, `case`, `internal_account`, `decision`, or `external_account`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "cases", "counterparties", "expected_payments", "external_accounts", "internal_accounts", "organizations", "paper_items", "payment_orders", "transactions", "decisions", "connections" ]
          }
        }, {
          "name" : "document_type",
          "in" : "query",
          "description" : "A category given to the document, can be `null`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/document"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Document" ],
        "summary" : "create document - nested path (legacy)",
        "description" : "Create a document.",
        "operationId" : "createDocument",
        "parameters" : [ {
          "name" : "documentable_id",
          "in" : "path",
          "description" : "The unique identifier for the associated object.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "documentable_type",
          "in" : "path",
          "description" : "The type of the associated object. Currently can be one of `payment_order`, `transaction`, `paper_item`, `expected_payment`, `counterparty`, `organization`, `case`, `internal_account`, `decision`, or `external_account`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "cases", "counterparties", "expected_payments", "external_accounts", "internal_accounts", "organizations", "paper_items", "payment_orders", "transactions", "decisions", "connections" ]
          }
        }, {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/legacy_document_create_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/document"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/{documentable_type}/{documentable_id}/documents/{id}" : {
      "get" : {
        "tags" : [ "Document" ],
        "summary" : "get document - nested path (legacy)",
        "description" : "Get an existing document.",
        "operationId" : "getDocument",
        "parameters" : [ {
          "name" : "documentable_id",
          "in" : "path",
          "description" : "The unique identifier for the associated object.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "documentable_type",
          "in" : "path",
          "description" : "The type of the associated object. Currently can be one of `payment_order`, `transaction`, `paper_item`, `expected_payment`, `counterparty`, `organization`, `case`, `internal_account`, `decision`, or `external_account`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "cases", "counterparties", "expected_payments", "external_accounts", "internal_accounts", "organizations", "paper_items", "payment_orders", "transactions", "decisions", "connections" ]
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the document.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/document"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/documents/{id}" : {
      "get" : {
        "tags" : [ "Document" ],
        "summary" : "get document",
        "description" : "Get an existing document.",
        "operationId" : "getDocument",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the document.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/document"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/{documentable_type}/{documentable_id}/documents/{id}/download" : {
      "get" : {
        "tags" : [ "Document" ],
        "summary" : "download document - nested path (legacy)",
        "description" : "Download an existing document.",
        "operationId" : "downloadDocument",
        "parameters" : [ {
          "name" : "documentable_id",
          "in" : "path",
          "description" : "The unique identifier for the associated object.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "documentable_type",
          "in" : "path",
          "description" : "The type of the associated object. Currently can be one of `payment_order`, `transaction`, `paper_item`, `expected_payment`, `counterparty`, `organization`, `case`, `internal_account`, `decision`, or `external_account`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "cases", "counterparties", "expected_payments", "external_accounts", "internal_accounts", "organizations", "paper_items", "payment_orders", "transactions", "decisions", "connections" ]
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the document.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "302" : {
            "description" : "redirect"
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/documents/{id}/download" : {
      "get" : {
        "tags" : [ "Document" ],
        "summary" : "download document",
        "description" : "Download an existing document.",
        "operationId" : "downloadDocument",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the document.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "302" : {
            "description" : "redirect"
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/events" : {
      "get" : {
        "tags" : [ "Event" ],
        "summary" : "list events",
        "operationId" : "listEvents",
        "parameters" : [ {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "event_time_start",
          "in" : "query",
          "description" : "An inclusive lower bound for when the event occurred",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "event_time_end",
          "in" : "query",
          "description" : "An inclusive upper bound for when the event occurred",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "resource",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "entity_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "event_name",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/event"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/events/{id}" : {
      "get" : {
        "tags" : [ "Event" ],
        "summary" : "get event",
        "operationId" : "getEvent",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "event id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/event"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/expected_payments" : {
      "get" : {
        "tags" : [ "ExpectedPayment" ],
        "summary" : "list expected_payments",
        "operationId" : "listExpectedPayments",
        "parameters" : [ {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "One of unreconciled, reconciled, or archived.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "archived", "partially_reconciled", "reconciled", "unreconciled" ]
          }
        }, {
          "name" : "internal_account_id",
          "in" : "query",
          "description" : "Specify internal_account_id to see expected_payments for a specific account.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "direction",
          "in" : "query",
          "description" : "One of credit, debit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "credit", "debit" ]
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "One of: ach, au_becs, bacs, book, check, eft, interac, provxchange, rtp,sen, sepa, signet, wire",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ach", "au_becs", "bacs", "book", "card", "check", "cross_border", "eft", "interac", "masav", "neft", "nics", "provxchange", "rtp", "se_bankgirot", "sen", "sepa", "sic", "signet", "wire", "zengin" ]
          }
        }, {
          "name" : "counterparty_id",
          "in" : "query",
          "description" : "Specify counterparty_id to see expected_payments for a specific account.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "metadata",
          "in" : "query",
          "description" : "For example, if you want to query for records with metadata key `Type` and value `Loan`, the query would be `metadata%5BType%5D=Loan`. This encodes the query parameters.",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "created_at_lower_bound",
          "in" : "query",
          "description" : "Used to return expected payments created after some datetime",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "created_at_upper_bound",
          "in" : "query",
          "description" : "Used to return expected payments created before some datetime",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/expected_payment"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "ExpectedPayment" ],
        "summary" : "create expected payment",
        "operationId" : "createExpectedPayment",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/expected_payment_create_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/expected_payment"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/expected_payments/{id}" : {
      "get" : {
        "tags" : [ "ExpectedPayment" ],
        "summary" : "get expected payment",
        "operationId" : "getExpectedPayment",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/expected_payment"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "ExpectedPayment" ],
        "summary" : "delete expected payment",
        "operationId" : "deleteExpectedPayment",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/expected_payment"
                }
              }
            }
          },
          "422" : {
            "description" : "parameter_invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "ExpectedPayment" ],
        "summary" : "update expected payment",
        "operationId" : "updateExpectedPayment",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/expected_payment_update_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/expected_payment"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/external_accounts/{id}/verify" : {
      "post" : {
        "tags" : [ "ExternalAccount" ],
        "summary" : "verify external account",
        "operationId" : "verifyExternalAccount",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "external account id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/external_account_verify_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/external_account"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/external_accounts/{id}/complete_verification" : {
      "post" : {
        "tags" : [ "ExternalAccount" ],
        "summary" : "complete verification of external account",
        "operationId" : "completeVerificationExternalAccount",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "external account id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/external_account_complete_verification_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/external_account"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/external_accounts" : {
      "get" : {
        "tags" : [ "ExternalAccount" ],
        "summary" : "list external accounts",
        "operationId" : "listExternalAccounts",
        "parameters" : [ {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "party_name",
          "in" : "query",
          "description" : "Searches the ExternalAccount's party_name AND the Counterparty's party_name",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "counterparty_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "metadata",
          "in" : "query",
          "description" : "For example, if you want to query for records with metadata key `Type` and value `Loan`, the query would be `metadata%5BType%5D=Loan`. This encodes the query parameters.",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/external_account"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "ExternalAccount" ],
        "summary" : "create external account",
        "operationId" : "createExternalAccount",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/external_account_create_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/external_account"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/external_accounts/{id}" : {
      "get" : {
        "tags" : [ "ExternalAccount" ],
        "summary" : "show external account",
        "operationId" : "getExternalAccount",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "external account id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/external_account"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "ExternalAccount" ],
        "summary" : "delete external account",
        "operationId" : "deleteExternalAccount",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "external account id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "successful"
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "ExternalAccount" ],
        "summary" : "update external account",
        "operationId" : "updateExternalAccount",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "external account id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/external_account_update_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/external_account"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/incoming_payment_details" : {
      "get" : {
        "tags" : [ "IncomingPaymentDetail" ],
        "summary" : "list incoming payment_details",
        "description" : "Get a list of Incoming Payment Details.",
        "operationId" : "listIncomingPaymentDetails",
        "parameters" : [ {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "direction",
          "in" : "query",
          "description" : "One of `credit` or `debit`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "credit", "debit" ]
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The current status of the incoming payment order. One of `pending`, `completed`, or `returned`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "completed", "pending", "returned" ]
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "One of: `ach`, `book`, `check`, `eft`, `interac`, `rtp`, `sepa`, `signet`, or `wire`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ach", "book", "check", "eft", "interac", "rtp", "sepa", "signet", "wire" ]
          }
        }, {
          "name" : "as_of_date_start",
          "in" : "query",
          "description" : "Filters incoming payment details with an as_of_date starting on or after the specified date (YYYY-MM-DD).",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "as_of_date_end",
          "in" : "query",
          "description" : "Filters incoming payment details with an as_of_date starting on or before the specified date (YYYY-MM-DD).",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "metadata",
          "in" : "query",
          "description" : "For example, if you want to query for records with metadata key `Type` and value `Loan`, the query would be `metadata%5BType%5D=Loan`. This encodes the query parameters.",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "virtual_account_id",
          "in" : "query",
          "description" : "If the incoming payment detail is in a virtual account, the ID of the Virtual Account.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/incoming_payment_detail"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/incoming_payment_details/{id}" : {
      "get" : {
        "tags" : [ "IncomingPaymentDetail" ],
        "summary" : "get incoming payment detail",
        "description" : "Get an existing Incoming Payment Detail.",
        "operationId" : "getIncomingPaymentDetail",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the incoming payment detail.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/incoming_payment_detail"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "IncomingPaymentDetail" ],
        "summary" : "update incoming payment detail",
        "description" : "Update an existing Incoming Payment Detail.",
        "operationId" : "updateIncomingPaymentDetail",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the incoming payment detail.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/incoming_payment_detail_update_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/incoming_payment_detail"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/internal_accounts" : {
      "get" : {
        "tags" : [ "InternalAccount" ],
        "summary" : "list internal accounts",
        "operationId" : "listInternalAccounts",
        "parameters" : [ {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "currency",
          "in" : "query",
          "description" : "The currency associated with the internal account.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/currency"
          }
        }, {
          "name" : "counterparty_id",
          "in" : "query",
          "description" : "The counterparty associated with the internal account.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "payment_type",
          "in" : "query",
          "description" : "The type of payment that can be made by the internal account.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ach", "au_becs", "bacs", "book", "card", "check", "cross_border", "eft", "interac", "masav", "neft", "nics", "provxchange", "rtp", "se_bankgirot", "sen", "sepa", "sic", "signet", "wire", "zengin" ]
          }
        }, {
          "name" : "payment_direction",
          "in" : "query",
          "description" : "The direction of payments that can be made by internal account.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "credit", "debit" ]
          }
        }, {
          "name" : "metadata",
          "in" : "query",
          "description" : "For example, if you want to query for records with metadata key `Type` and value `Loan`, the query would be `metadata%5BType%5D=Loan`. This encodes the query parameters.",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/internal_account"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "InternalAccount" ],
        "summary" : "create internal account",
        "operationId" : "createInternalAccount",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/internal_account_create_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/internal_account"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/internal_accounts/{id}" : {
      "get" : {
        "tags" : [ "InternalAccount" ],
        "summary" : "get internal account",
        "operationId" : "getInternalAccount",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier for the account.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/internal_account"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "InternalAccount" ],
        "summary" : "update internal account",
        "operationId" : "updateInternalAccount",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier for the account.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/internal_account_update_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/internal_account"
                }
              }
            }
          },
          "404" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/invoices/{invoice_id}/invoice_line_items" : {
      "get" : {
        "tags" : [ "InvoiceLineItem" ],
        "summary" : "list invoice_line_items",
        "operationId" : "listInvoiceLineItems",
        "parameters" : [ {
          "name" : "invoice_id",
          "in" : "path",
          "description" : "invoice_id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/invoice_line_item"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "InvoiceLineItem" ],
        "summary" : "create invoice_line_item",
        "operationId" : "createInvoiceLineItem",
        "parameters" : [ {
          "name" : "invoice_id",
          "in" : "path",
          "description" : "invoice_id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/invoice_line_item_create_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invoice_line_item"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/invoices/{invoice_id}/invoice_line_items/{id}" : {
      "get" : {
        "tags" : [ "InvoiceLineItem" ],
        "summary" : "get invoice_line_item",
        "operationId" : "getInvoiceLineItem",
        "parameters" : [ {
          "name" : "invoice_id",
          "in" : "path",
          "description" : "invoice_id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invoice_line_item"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "InvoiceLineItem" ],
        "summary" : "delete invoice_line_item",
        "operationId" : "deleteInvoiceLineItem",
        "parameters" : [ {
          "name" : "invoice_id",
          "in" : "path",
          "description" : "invoice_id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invoice_line_item"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "InvoiceLineItem" ],
        "summary" : "update invoice_line_item",
        "operationId" : "updateInvoiceLineItem",
        "parameters" : [ {
          "name" : "invoice_id",
          "in" : "path",
          "description" : "invoice_id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/invoice_line_item_update_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invoice_line_item"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/invoices" : {
      "get" : {
        "tags" : [ "Invoice" ],
        "summary" : "list invoices",
        "operationId" : "listInvoices",
        "parameters" : [ {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/invoice"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Invoice" ],
        "summary" : "create invoice",
        "operationId" : "createInvoice",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/invoice_create_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invoice"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/invoices/{id}/payment_orders/{payment_order_id}" : {
      "put" : {
        "tags" : [ "PaymentOrder" ],
        "summary" : "add payment_order_id to invoice",
        "description" : "Add a payment order to an invoice.",
        "operationId" : "addPaymentOrderToInvoice",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "payment_order_id",
          "in" : "path",
          "description" : "payment_order_id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful"
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/invoices/{id}" : {
      "get" : {
        "tags" : [ "Invoice" ],
        "summary" : "get invoice",
        "operationId" : "getInvoice",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invoice"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "Invoice" ],
        "summary" : "update invoice",
        "operationId" : "updateInvoice",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/invoice_update_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invoice"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ledger_account_balance_monitors" : {
      "get" : {
        "tags" : [ "LedgerAccountBalanceMonitor" ],
        "summary" : "list ledger_account_balance_monitors",
        "description" : "Get a list of ledger account balance monitors.",
        "operationId" : "listLedgerAccountBalanceMonitors",
        "parameters" : [ {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "metadata",
          "in" : "query",
          "description" : "For example, if you want to query for records with metadata key `Type` and value `Loan`, the query would be `metadata%5BType%5D=Loan`. This encodes the query parameters.",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "id[]",
          "in" : "query",
          "description" : "If you have specific IDs to retrieve in bulk, you can pass them as query parameters delimited with `id[]=`, for example `?id[]=123&id[]=abc`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "allowReserved" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "ledger_account_id",
          "in" : "query",
          "description" : "Query the balance monitors for a single ledger account.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "required" : false,
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ledger_account_balance_monitor"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "LedgerAccountBalanceMonitor" ],
        "summary" : "create ledger_account_balance_monitor",
        "description" : "Create a ledger account balance monitor.",
        "operationId" : "createLedgerAccountBalanceMonitor",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ledger_account_balance_monitor_create_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger_account_balance_monitor"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ledger_account_balance_monitors/{id}" : {
      "get" : {
        "tags" : [ "LedgerAccountBalanceMonitor" ],
        "summary" : "get ledger_account_balance_monitor",
        "description" : "Get details on a single ledger account balance monitor.",
        "operationId" : "getLedgerAccountBalanceMonitor",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger_account_balance_monitor"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "LedgerAccountBalanceMonitor" ],
        "summary" : "delete ledger_account_balance_monitor",
        "description" : "Delete a ledger account balance monitor.",
        "operationId" : "deleteLedgerAccountBalanceMonitor",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger_account_balance_monitor"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "LedgerAccountBalanceMonitor" ],
        "summary" : "update ledger_account_balance_monitor",
        "description" : "Update a ledger account balance monitor.",
        "operationId" : "updateLedgerAccountBalanceMonitor",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ledger_account_balance_monitor_update_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger_account_balance_monitor"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ledger_account_categories" : {
      "get" : {
        "tags" : [ "LedgerAccountCategory" ],
        "summary" : "list ledger_account_categories",
        "description" : "Get a list of ledger account categories.",
        "operationId" : "listLedgerAccountCategories",
        "parameters" : [ {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "metadata",
          "in" : "query",
          "description" : "For example, if you want to query for records with metadata key `Type` and value `Loan`, the query would be `metadata%5BType%5D=Loan`. This encodes the query parameters.",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "id[]",
          "in" : "query",
          "description" : "If you have specific IDs to retrieve in bulk, you can pass them as query parameters delimited with `id[]=`, for example `?id[]=123&id[]=abc`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "allowReserved" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "name",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ledger_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "parent_ledger_account_category_id",
          "in" : "query",
          "description" : "Query categories that are nested underneath a parent category",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ledger_account_id",
          "in" : "query",
          "description" : "Query categories which contain a ledger account directly or through child categories.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "balances",
          "in" : "query",
          "description" : "For example, if you want the balances as of a particular time (ISO8601), the encoded query string would be `balances%5Beffective_at%5D=2000-12-31T12:00:00Z`. The balances as of a time are inclusive of entries with that exact time.",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/balances"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "required" : false,
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ledger_account_category"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "LedgerAccountCategory" ],
        "summary" : "create ledger_account_category",
        "description" : "Create a ledger account category.",
        "operationId" : "createLedgerAccountCategory",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ledger_account_category_create_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger_account_category"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ledger_account_categories/{id}" : {
      "get" : {
        "tags" : [ "LedgerAccountCategory" ],
        "summary" : "get ledger_account_category",
        "description" : "Get the details on a single ledger account category.",
        "operationId" : "getLedgerAccountCategory",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "balances",
          "in" : "query",
          "description" : "For example, if you want the balances as of a particular time (ISO8601), the encoded query string would be `balances%5Beffective_at%5D=2000-12-31T12:00:00Z`. The balances as of a time are inclusive of entries with that exact time.",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/balances_1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger_account_category"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "LedgerAccountCategory" ],
        "summary" : "delete ledger_account_category",
        "description" : "Delete a ledger account category.",
        "operationId" : "deleteLedgerAccountCategory",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger_account_category"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "LedgerAccountCategory" ],
        "summary" : "update ledger_account_category",
        "description" : "Update the details of a ledger account category.",
        "operationId" : "updateLedgerAccountCategory",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ledger_account_category_update_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger_account_category"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ledger_account_categories/{id}/ledger_accounts/{ledger_account_id}" : {
      "put" : {
        "tags" : [ "LedgerAccountCategory" ],
        "summary" : "add ledger_account to ledger_account_category",
        "description" : "Add a ledger account to a ledger account category.",
        "operationId" : "addLedgerAccountToLedgerAccountCategory",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ledger_account_id",
          "in" : "path",
          "description" : "ledger_account_id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful"
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "LedgerAccountCategory" ],
        "summary" : "remove ledger_account from ledger_account_category",
        "description" : "Remove a ledger account from a ledger account category.",
        "operationId" : "removeLedgerAccountFromLedgerAccountCategory",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ledger_account_id",
          "in" : "path",
          "description" : "ledger_account_id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful"
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ledger_account_categories/{id}/ledger_account_categories/{sub_category_id}" : {
      "put" : {
        "tags" : [ "LedgerAccountCategory" ],
        "summary" : "add ledger_account_category to ledger_account_category",
        "description" : "Add a ledger account category to a ledger account category.",
        "operationId" : "addLedgerAccountCategoryToLedgerAccountCategory",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sub_category_id",
          "in" : "path",
          "description" : "sub_category_id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful"
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "LedgerAccountCategory" ],
        "summary" : "delete ledger_account_category from ledger_account_category",
        "description" : "Delete a ledger account category from a ledger account category.",
        "operationId" : "deleteLedgerAccountCategoryFromLedgerAccountCategory",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sub_category_id",
          "in" : "path",
          "description" : "sub_category_id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful"
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ledger_account_payouts" : {
      "get" : {
        "tags" : [ "LedgerAccountPayout" ],
        "summary" : "list ledger_account_payouts",
        "description" : "Get a list of ledger account payouts.",
        "operationId" : "listLedgerAccountPayouts",
        "parameters" : [ {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "metadata",
          "in" : "query",
          "description" : "For example, if you want to query for records with metadata key `Type` and value `Loan`, the query would be `metadata%5BType%5D=Loan`. This encodes the query parameters.",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "id[]",
          "in" : "query",
          "description" : "If you have specific IDs to retrieve in bulk, you can pass them as query parameters delimited with `id[]=`, for example `?id[]=123&id[]=abc`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "allowReserved" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "payout_ledger_account_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "required" : false,
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ledger_account_payout"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "LedgerAccountPayout" ],
        "summary" : "create ledger_account_payout",
        "description" : "Create a ledger account payout.",
        "operationId" : "createLedgerAccountPayout",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ledger_account_payout_create_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger_account_payout"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ledger_account_payouts/{id}" : {
      "get" : {
        "tags" : [ "LedgerAccountPayout" ],
        "summary" : "get ledger_account_payout",
        "description" : "Get details on a single ledger account payout.",
        "operationId" : "getLedgerAccountPayout",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger_account_payout"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "LedgerAccountPayout" ],
        "summary" : "update ledger_account_payout",
        "description" : "Update the details of a ledger account payout.",
        "operationId" : "updateLedgerAccountPayout",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ledger_account_payout_update_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger_account_payout"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ledger_account_statements" : {
      "post" : {
        "tags" : [ "LedgerAccountStatement" ],
        "summary" : "create ledger_account_statement",
        "description" : "Create a ledger account statement.",
        "operationId" : "createLedgerAccountStatement",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ledger_account_statement_create_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger_account_statement"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ledger_account_statements/{id}" : {
      "get" : {
        "tags" : [ "LedgerAccountStatement" ],
        "summary" : "get ledger_account_statement",
        "description" : "Get details on a single ledger account statement.",
        "operationId" : "getLedgerAccountStatement",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger_account_statement"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ledger_accounts" : {
      "get" : {
        "tags" : [ "LedgerAccount" ],
        "summary" : "list ledger_accounts",
        "description" : "Get a list of ledger accounts.",
        "operationId" : "listLedgerAccounts",
        "parameters" : [ {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "metadata",
          "in" : "query",
          "description" : "For example, if you want to query for records with metadata key `Type` and value `Loan`, the query would be `metadata%5BType%5D=Loan`. This encodes the query parameters.",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "id[]",
          "in" : "query",
          "description" : "If you have specific IDs to retrieve in bulk, you can pass them as query parameters delimited with `id[]=`, for example `?id[]=123&id[]=abc`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "allowReserved" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "name",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ledger_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "currency",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "balances",
          "in" : "query",
          "description" : "Use `balances[effective_at_lower_bound]` and `balances[effective_at_upper_bound]` to get the balances change between the two timestamps. The lower bound is inclusive while the upper bound is exclusive of the provided timestamps. If no value is supplied the balances will be retrieved not including that bound.",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/balances_2"
          }
        }, {
          "name" : "pending_balance_amount",
          "in" : "query",
          "description" : "Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), `eq` (=), or `not_eq` (!=) to filter by balance amount.",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/pending_balance_amount"
          }
        }, {
          "name" : "posted_balance_amount",
          "in" : "query",
          "description" : "Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), `eq` (=), or `not_eq` (!=) to filter by balance amount.",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/posted_balance_amount"
          }
        }, {
          "name" : "available_balance_amount",
          "in" : "query",
          "description" : "Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), `eq` (=), or `not_eq` (!=) to filter by balance amount.",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/available_balance_amount"
          }
        }, {
          "name" : "created_at",
          "in" : "query",
          "description" : "Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to filter by the created at timestamp. For example, for all times after Jan 1 2000 12:00 UTC, use created_at%5Bgt%5D=2000-01-01T12:00:00Z.",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          }
        }, {
          "name" : "updated_at",
          "in" : "query",
          "description" : "Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to filter by the updated at timestamp. For example, for all times after Jan 1 2000 12:00 UTC, use updated_at%5Bgt%5D=2000-01-01T12:00:00Z.",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          }
        }, {
          "name" : "ledger_account_category_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "required" : false,
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ledger_account"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "LedgerAccount" ],
        "summary" : "create ledger_account",
        "description" : "Create a ledger account.",
        "operationId" : "createLedgerAccount",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ledger_account_create_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger_account"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ledger_accounts/{id}" : {
      "get" : {
        "tags" : [ "LedgerAccount" ],
        "summary" : "get ledger_account",
        "description" : "Get details on a single ledger account.",
        "operationId" : "getLedgerAccount",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "balances",
          "in" : "query",
          "description" : "Use `balances[effective_at_lower_bound]` and `balances[effective_at_upper_bound]` to get the balances change between the two timestamps. The lower bound is inclusive while the upper bound is exclusive of the provided timestamps. If no value is supplied the balances will be retrieved not including that bound. Use `balances[as_of_lock_version]` to retrieve a balance as of a specific Ledger Account `lock_version`.",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/balances_3"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger_account"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "LedgerAccount" ],
        "summary" : "delete ledger_account",
        "description" : "Delete a ledger account.",
        "operationId" : "deleteLedgerAccount",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger_account"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "LedgerAccount" ],
        "summary" : "update ledger_account",
        "description" : "Update the details of a ledger account.",
        "operationId" : "updateLedgerAccount",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ledger_account_update_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger_account"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ledger_entries" : {
      "get" : {
        "tags" : [ "LedgerEntry" ],
        "summary" : "list ledger_entries",
        "description" : "Get a list of all ledger entries.",
        "operationId" : "listLedgerEntries",
        "parameters" : [ {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "id[]",
          "in" : "query",
          "description" : "If you have specific IDs to retrieve in bulk, you can pass them as query parameters delimited with `id[]=`, for example `?id[]=123&id[]=abc`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "allowReserved" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "ledger_account_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ledger_transaction_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ledger_account_payout_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "effective_date",
          "in" : "query",
          "description" : "Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to filter by the transaction's effective date. Format YYYY-MM-DD",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date"
            }
          }
        }, {
          "name" : "effective_at",
          "in" : "query",
          "description" : "Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to filter by the transaction's effective time. Format ISO8601",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "time"
            }
          }
        }, {
          "name" : "updated_at",
          "in" : "query",
          "description" : "Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to filter by the posted at timestamp. For example, for all times after Jan 1 2000 12:00 UTC, use updated_at%5Bgt%5D=2000-01-01T12:00:00Z.",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          }
        }, {
          "name" : "as_of_lock_version",
          "in" : "query",
          "description" : "Shows all ledger entries that were present on a ledger account at a particular `lock_version`. You must also specify `ledger_account_id`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "ledger_account_lock_version",
          "in" : "query",
          "description" : "Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to filter by the lock_version of a ledger account. For example, for all entries created at or before before lock_version 1000 of a ledger account, use `ledger_account_lock_version%5Blte%5D=1000`.",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "integer"
            }
          }
        }, {
          "name" : "ledger_account_category_id",
          "in" : "query",
          "description" : "Get all ledger entries that match the direction specified. One of `credit`, `debit`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ledger_account_statement_id",
          "in" : "query",
          "description" : "Get all ledger entries that are included in the ledger account statement.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "show_deleted",
          "in" : "query",
          "description" : "If true, response will include ledger entries that were deleted. When you update a ledger transaction to specify a new set of entries, the previous entries are deleted.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "direction",
          "in" : "query",
          "description" : "If true, response will include ledger entries that were deleted. When you update a ledger transaction to specify a new set of entries, the previous entries are deleted.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "credit", "debit" ]
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Get all ledger entries that match the status specified. One of `pending`, `posted`, or `archived`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "pending", "posted", "archived" ]
          }
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Order by `created_at` or `effective_at` in `asc` or `desc` order. For example, to order by `effective_at asc`, use `order_by%5Beffective_at%5D=asc`. Ordering by only one field at a time is supported.",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/order_by"
          }
        }, {
          "name" : "show_balances",
          "in" : "query",
          "description" : "If true, response will include the balances attached to the ledger entry. If there is no balance available, null will be returned instead.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "metadata",
          "in" : "query",
          "description" : "For example, if you want to query for records with metadata key `Type` and value `Loan`, the query would be `metadata%5BType%5D=Loan`. This encodes the query parameters.",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "required" : false,
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ledger_entry"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ledger_entries/{id}" : {
      "get" : {
        "tags" : [ "LedgerEntry" ],
        "summary" : "get ledger_entry",
        "description" : "Get details on a single ledger entry.",
        "operationId" : "getLedgerEntry",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "show_balances",
          "in" : "query",
          "description" : "If true, response will include the balances attached to the ledger entry. If there is no balance available, null will be returned instead.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger_entry"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ledger_event_handlers" : {
      "get" : {
        "tags" : [ "LedgerEventHandler" ],
        "summary" : "list ledger_event_handlers",
        "description" : "Get a list of ledger event handlers.",
        "operationId" : "listLedgerEventHandlers",
        "parameters" : [ {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "metadata",
          "in" : "query",
          "description" : "For example, if you want to query for records with metadata key `Type` and value `Loan`, the query would be `metadata%5BType%5D=Loan`. This encodes the query parameters.",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "name",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "created_at",
          "in" : "query",
          "description" : "Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to filter by the posted at timestamp. For example, for all times after Jan 1 2000 12:00 UTC, use created_at%5Bgt%5D=2000-01-01T12:00:00Z.",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "required" : false,
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ledger_event_handler"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "LedgerEventHandler" ],
        "summary" : "create ledger_event_handler",
        "operationId" : "createLedgerEventHandler",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ledger_event_handler_create_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger_event_handler"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "400" : {
            "description" : "parameter_invalid"
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ledger_event_handlers/{id}" : {
      "get" : {
        "tags" : [ "LedgerEventHandler" ],
        "summary" : "get ledger_event_handler",
        "description" : "Get details on a single ledger event handler.",
        "operationId" : "getLedgerEventHandler",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger_event_handler"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "LedgerEventHandler" ],
        "summary" : "delete ledger_event_handler",
        "description" : "Archive a ledger event handler.",
        "operationId" : "deleteLedgerEventHandler",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger_event_handler"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ledger_transactions/{id}/reversal" : {
      "post" : {
        "tags" : [ "LedgerTransaction" ],
        "summary" : "create ledger_transaction reversal",
        "description" : "Create a ledger transaction reversal.",
        "operationId" : "CreateLedgerTransactionReversal",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of ledger transaction to reverse.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ledger_transaction_reversal_create_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger_transaction"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ledger_transaction_versions" : {
      "get" : {
        "tags" : [ "LedgerTransaction" ],
        "summary" : "list ledger_transaction_versions",
        "description" : "Get a list of ledger transaction versions.",
        "operationId" : "listLedgerTransactionVersions",
        "parameters" : [ {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "created_at",
          "in" : "query",
          "description" : "Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to filter by the created_at timestamp. For example, for all dates after Jan 1 2000 12:00 UTC, use created_at%5Bgt%5D=2000-01-01T12:00:00Z.",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          }
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to filter by the version. For example, for all versions after 2, use version%5Bgt%5D=2.",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "integer"
            }
          }
        }, {
          "name" : "ledger_transaction_id",
          "in" : "query",
          "description" : "Get all the ledger transaction versions corresponding to the ID of a ledger transaction.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ledger_account_statement_id",
          "in" : "query",
          "description" : "Get all ledger transaction versions that are included in the ledger account statement.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "required" : false,
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ledger_transaction_version"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ledger_transactions" : {
      "get" : {
        "tags" : [ "LedgerTransaction" ],
        "summary" : "list ledger_transactions",
        "description" : "Get a list of ledger transactions.",
        "operationId" : "listLedgerTransactions",
        "parameters" : [ {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "metadata",
          "in" : "query",
          "description" : "For example, if you want to query for records with metadata key `Type` and value `Loan`, the query would be `metadata%5BType%5D=Loan`. This encodes the query parameters.",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "id[]",
          "in" : "query",
          "description" : "If you have specific IDs to retrieve in bulk, you can pass them as query parameters delimited with `id[]=`, for example `?id[]=123&id[]=abc`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "allowReserved" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "ledger_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ledger_account_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "effective_at",
          "in" : "query",
          "description" : "Use \"gt\" (>), \"gte\" (>=), \"lt\" (<), \"lte\" (<=), or \"eq\" (=) to filter by effective at. For example, for all transactions after Jan 1 2000, use effective_at%5Bgt%5D=2000-01-01T00:00:00:00.000Z.",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "time"
            }
          }
        }, {
          "name" : "effective_date",
          "in" : "query",
          "description" : "Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to filter by effective date. For example, for all dates after Jan 1 2000, use effective_date%5Bgt%5D=2000-01-01.",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          }
        }, {
          "name" : "posted_at",
          "in" : "query",
          "description" : "Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to filter by the posted at timestamp. For example, for all times after Jan 1 2000 12:00 UTC, use posted_at%5Bgt%5D=2000-01-01T12:00:00Z.",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          }
        }, {
          "name" : "updated_at",
          "in" : "query",
          "description" : "Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to filter by the posted at timestamp. For example, for all times after Jan 1 2000 12:00 UTC, use updated_at%5Bgt%5D=2000-01-01T12:00:00Z.",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          }
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Order by `created_at` or `effective_at` in `asc` or `desc` order. For example, to order by `effective_at asc`, use `order_by%5Beffective_at%5D=asc`. Ordering by only one field at a time is supported.",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/order_by_1"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "pending", "posted", "archived" ]
          }
        }, {
          "name" : "external_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ledger_account_category_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ledger_account_payout_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reverses_ledger_transaction_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ledgerable_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ledgerable_type",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "counterparty", "expected_payment", "incoming_payment_detail", "internal_account", "line_item", "paper_item", "payment_order", "payment_order_attempt", "return", "reversal" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "required" : false,
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ledger_transaction"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "parameter invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "LedgerTransaction" ],
        "summary" : "create ledger_transaction",
        "description" : "Create a ledger transaction.",
        "operationId" : "createLedgerTransaction",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ledger_transaction_create_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger_transaction"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "429" : {
            "description" : "too many requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ledger_transactions/{id}" : {
      "get" : {
        "tags" : [ "LedgerTransaction" ],
        "summary" : "get ledger_transaction",
        "description" : "Get details on a single ledger transaction.",
        "operationId" : "getLedgerTransaction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger_transaction"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "LedgerTransaction" ],
        "summary" : "update ledger_transaction",
        "description" : "Update the details of a ledger transaction.",
        "operationId" : "updateLedgerTransaction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ledger_transaction_update_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger_transaction"
                }
              }
            }
          },
          "400" : {
            "description" : "parameter_invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "429" : {
            "description" : "too many requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ledger_transactions/{id}/versions" : {
      "get" : {
        "tags" : [ "LedgerTransaction" ],
        "summary" : "list ledger_transaction versions",
        "description" : "Get a list of ledger transaction versions.",
        "operationId" : "listLedgerTransactionVersions",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "id[]",
          "in" : "query",
          "description" : "If you have specific IDs to retrieve in bulk, you can pass them as query parameters delimited with `id[]=`, for example `?id[]=123&id[]=abc`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "allowReserved" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "created_at",
          "in" : "query",
          "description" : "Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to filter by the created_at timestamp. For example, for all dates after Jan 1 2000 12:00 UTC, use created_at%5Bgt%5D=2000-01-01T12:00:00Z.",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          }
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to filter by the version. For example, for all versions after 2, use version%5Bgt%5D=2.",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "integer"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "required" : false,
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ledger_transaction_version"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ledgerable_events" : {
      "post" : {
        "tags" : [ "LedgerableEvent" ],
        "summary" : "create ledgerable event",
        "description" : "Translation missing: en.openapi.descriptions.ledger.operations.create_ledgerable_event",
        "operationId" : "createLedgerableEvent",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ledgerable_event_create_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledgerable_event"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ledgerable_events/{id}" : {
      "get" : {
        "tags" : [ "LedgerableEvent" ],
        "summary" : "get ledgerable_event",
        "description" : "Get details on a single ledgerable event.",
        "operationId" : "getLedgerableEvent",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledgerable_event"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ledgers" : {
      "get" : {
        "tags" : [ "Ledger" ],
        "summary" : "list ledgers",
        "description" : "Get a list of ledgers.",
        "operationId" : "listLedgers",
        "parameters" : [ {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "metadata",
          "in" : "query",
          "description" : "For example, if you want to query for records with metadata key `Type` and value `Loan`, the query would be `metadata%5BType%5D=Loan`. This encodes the query parameters.",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "id[]",
          "in" : "query",
          "description" : "If you have specific IDs to retrieve in bulk, you can pass them as query parameters delimited with `id[]=`, for example `?id[]=123&id[]=abc`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "allowReserved" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "updated_at",
          "in" : "query",
          "description" : "Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to filter by the posted at timestamp. For example, for all times after Jan 1 2000 12:00 UTC, use updated_at%5Bgt%5D=2000-01-01T12:00:00Z.",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "required" : false,
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ledger"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Ledger" ],
        "summary" : "create ledger",
        "description" : "Create a ledger.",
        "operationId" : "createLedger",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ledger_create_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ledgers/{id}" : {
      "get" : {
        "tags" : [ "Ledger" ],
        "summary" : "get ledger",
        "description" : "Get details on a single ledger.",
        "operationId" : "getLedger",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Ledger" ],
        "summary" : "delete ledger",
        "description" : "Delete a ledger.",
        "operationId" : "deleteLedger",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "Ledger" ],
        "summary" : "update ledger",
        "description" : "Update the details of a ledger.",
        "operationId" : "updateLedger",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ledger_update_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ledger"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/{itemizable_type}/{itemizable_id}/line_items" : {
      "get" : {
        "tags" : [ "LineItem" ],
        "summary" : "list line items",
        "description" : "Get a list of line items",
        "operationId" : "listLineItems",
        "parameters" : [ {
          "name" : "itemizable_id",
          "in" : "path",
          "description" : "The ID of the payment order or expected payment.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemizable_type",
          "in" : "path",
          "description" : "One of `payment_orders` or `expected_payments`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "expected_payments", "payment_orders" ]
          }
        }, {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/line_item"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/{itemizable_type}/{itemizable_id}/line_items/{id}" : {
      "get" : {
        "tags" : [ "LineItem" ],
        "summary" : "get line item",
        "description" : "Get a single line item",
        "operationId" : "getLineItem",
        "parameters" : [ {
          "name" : "itemizable_id",
          "in" : "path",
          "description" : "The ID of the payment order or expected payment.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemizable_type",
          "in" : "path",
          "description" : "One of `payment_orders` or `expected_payments`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "expected_payments", "payment_orders" ]
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the line item.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/line_item"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "LineItem" ],
        "summary" : "update line item",
        "operationId" : "updateLineItem",
        "parameters" : [ {
          "name" : "itemizable_id",
          "in" : "path",
          "description" : "The ID of the payment order or expected payment.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemizable_type",
          "in" : "path",
          "description" : "One of `payment_orders` or `expected_payments`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "expected_payments", "payment_orders" ]
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the line item.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/line_item_update_request"
              }
            }
          }
        },
        "responses" : {
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/line_item"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/paper_items" : {
      "get" : {
        "tags" : [ "PaperItem" ],
        "summary" : "list paper items",
        "description" : "Get a list of all paper items.",
        "operationId" : "listPaperItems",
        "parameters" : [ {
          "name" : "lockbox_number",
          "in" : "query",
          "description" : "Specify `lockbox_number` if you wish to see paper items that are associated with a specific lockbox number.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deposit_date_start",
          "in" : "query",
          "description" : "Specify an inclusive start date (YYYY-MM-DD) when filtering by deposit_date",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "deposit_date_end",
          "in" : "query",
          "description" : "Specify an inclusive end date (YYYY-MM-DD) when filtering by deposit_date",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/paper_item"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/paper_items/{id}" : {
      "get" : {
        "tags" : [ "PaperItem" ],
        "summary" : "get paper item",
        "description" : "Get details on a single paper item.",
        "operationId" : "getPaperItem",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/paper_item"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/payment_orders/create_async" : {
      "post" : {
        "tags" : [ "PaymentOrder" ],
        "summary" : "create async payment order",
        "description" : "Create a new payment order asynchronously",
        "operationId" : "createAsyncPaymentOrder",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/payment_order_async_create_request"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/async_response"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/payment_orders" : {
      "get" : {
        "tags" : [ "PaymentOrder" ],
        "summary" : "list payment orders",
        "description" : "Get a list of all payment orders",
        "operationId" : "listPaymentOrders",
        "parameters" : [ {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ach", "au_becs", "bacs", "book", "card", "check", "cross_border", "eft", "interac", "masav", "neft", "nics", "provxchange", "rtp", "se_bankgirot", "sen", "sepa", "sic", "signet", "wire", "zengin" ]
          }
        }, {
          "name" : "priority",
          "in" : "query",
          "description" : "Either `normal` or `high`. For ACH and EFT payments, `high` represents a same-day ACH or EFT transfer, respectively. For check payments, `high` can mean an overnight check rather than standard mail.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "high", "normal" ]
          }
        }, {
          "name" : "counterparty_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "originating_account_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "transaction_id",
          "in" : "query",
          "description" : "The ID of a transaction that the payment order has been reconciled to.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "approved", "cancelled", "completed", "denied", "failed", "needs_approval", "pending", "processing", "returned", "reversed", "sent" ]
          }
        }, {
          "name" : "direction",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "credit", "debit" ]
          }
        }, {
          "name" : "reference_number",
          "in" : "query",
          "description" : "Query for records with the provided reference number",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "effective_date_start",
          "in" : "query",
          "description" : "An inclusive lower bound for searching effective_date",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "effective_date_end",
          "in" : "query",
          "description" : "An inclusive upper bound for searching effective_date",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "metadata",
          "in" : "query",
          "description" : "For example, if you want to query for records with metadata key `Type` and value `Loan`, the query would be `metadata%5BType%5D=Loan`. This encodes the query parameters.",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "required" : false,
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/payment_order"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "PaymentOrder" ],
        "summary" : "create payment order",
        "description" : "Create a new Payment Order",
        "operationId" : "createPaymentOrder",
        "parameters" : [ {
          "name" : "Content-Type",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "application/json", "multipart/form-data" ]
          }
        }, {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/payment_order_create_request"
              }
            },
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/payment_order_create_request"
              }
            }
          }
        },
        "responses" : {
          "401" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "400" : {
            "description" : "parameter_invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "201" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/payment_order"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/payment_orders/{id}" : {
      "get" : {
        "tags" : [ "PaymentOrder" ],
        "summary" : "get payment order",
        "description" : "Get details on a single payment order",
        "operationId" : "getPaymentOrder",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/payment_order"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "PaymentOrder" ],
        "summary" : "update payment order",
        "description" : "Update a payment order",
        "operationId" : "updatePaymentOrder",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/payment_order_update_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/payment_order"
                }
              }
            }
          },
          "422" : {
            "description" : "parameter_invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/payment_references" : {
      "get" : {
        "tags" : [ "PaymentReference" ],
        "summary" : "list payment_references",
        "operationId" : "listPaymentReferences",
        "parameters" : [ {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "referenceable_id",
          "in" : "query",
          "description" : "The id of the referenceable to search for. Must be accompanied by the referenceable_type or will return an error.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "referenceable_type",
          "in" : "query",
          "description" : "One of the referenceable types. This must be accompanied by the id of the referenceable or will return an error.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "payment_order", "return", "reversal" ]
          }
        }, {
          "name" : "reference_number",
          "in" : "query",
          "description" : "The actual reference number assigned by the bank.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "required" : false,
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/payment_reference_object"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/payment_references/{id}" : {
      "get" : {
        "tags" : [ "PaymentReference" ],
        "summary" : "get payment_reference",
        "operationId" : "getPaymentReference",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/payment_reference_object"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/ping" : {
      "get" : {
        "tags" : [ "Ping" ],
        "summary" : "ping api",
        "description" : "A test endpoint often used to confirm credentials and headers are being passed in correctly.",
        "operationId" : "pingAPI",
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ping_response"
                }
              }
            }
          },
          "500" : {
            "description" : "internal server error"
          },
          "401" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "429" : {
            "description" : "unsuccessful"
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/returns" : {
      "get" : {
        "tags" : [ "Return" ],
        "summary" : "list returns",
        "description" : "Get a list of returns.",
        "operationId" : "listReturns",
        "parameters" : [ {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "internal_account_id",
          "in" : "query",
          "description" : "Specify `internal_account_id` if you wish to see returns to/from a specific account.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "counterparty_id",
          "in" : "query",
          "description" : "Specify `counterparty_id` if you wish to see returns that occurred with a specific counterparty.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "returnable_id",
          "in" : "query",
          "description" : "The ID of a valid returnable. Must be accompanied by `returnable_type`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "returnable_type",
          "in" : "query",
          "description" : "One of `payment_order`, `paper_item`, `reversal`, or `incoming_payment_detail`. Must be accompanied by `returnable_id`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "incoming_payment_detail", "paper_item", "payment_order", "return", "reversal" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/return"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Return" ],
        "summary" : "create return",
        "description" : "Create a return.",
        "operationId" : "createReturn",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/return_create_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/return"
                }
              }
            }
          },
          "404" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/returns/{id}" : {
      "get" : {
        "tags" : [ "Return" ],
        "summary" : "show return",
        "description" : "Get a single return.",
        "operationId" : "getReturn",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of an existing return.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/return"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/payment_orders/{payment_order_id}/reversals" : {
      "get" : {
        "tags" : [ "Reversal" ],
        "summary" : "list reversals",
        "description" : "Get a list of all reversals of a payment order.",
        "operationId" : "listReversals",
        "parameters" : [ {
          "name" : "payment_order_id",
          "in" : "path",
          "description" : "The ID of the relevant Payment Order.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/reversal"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Reversal" ],
        "summary" : "create reversal",
        "description" : "Create a reversal for a payment order.",
        "operationId" : "createReversal",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "payment_order_id",
          "in" : "path",
          "description" : "The ID of the relevant Payment Order.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "The id of the payment order being reversed.",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/reversal_create_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/reversal"
                }
              }
            }
          },
          "404" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/payment_orders/{payment_order_id}/reversals/{reversal_id}" : {
      "get" : {
        "tags" : [ "Reversal" ],
        "summary" : "show reversal",
        "description" : "Get details on a single reversal of a payment order.",
        "operationId" : "getReversal",
        "parameters" : [ {
          "name" : "payment_order_id",
          "in" : "path",
          "description" : "The id of the payment order being reversed.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "reversal_id",
          "in" : "path",
          "description" : "The ID of the reversal.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/reversal"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/{accounts_type}/{account_id}/routing_details" : {
      "get" : {
        "tags" : [ "RoutingDetail" ],
        "summary" : "list routing_details",
        "description" : "Get a list of routing details for a single internal or external account.",
        "operationId" : "listRoutingDetails",
        "parameters" : [ {
          "name" : "accounts_type",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "external_accounts", "internal_accounts" ]
          }
        }, {
          "name" : "account_id",
          "in" : "path",
          "description" : "The ID of the account.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/routing_detail"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "RoutingDetail" ],
        "summary" : "create routing_detail",
        "description" : "Create a routing detail for a single external account.",
        "operationId" : "createRoutingDetail",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accounts_type",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "external_accounts" ]
          }
        }, {
          "name" : "account_id",
          "in" : "path",
          "description" : "The ID of the account.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/routing_detail_create_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/routing_detail"
                }
              }
            }
          },
          "404" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/{accounts_type}/{account_id}/routing_details/{id}" : {
      "get" : {
        "tags" : [ "RoutingDetail" ],
        "summary" : "get routing_detail",
        "description" : "Get a single routing detail for a single internal or external account.",
        "operationId" : "getRoutingDetail",
        "parameters" : [ {
          "name" : "accounts_type",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "external_accounts", "internal_accounts" ]
          }
        }, {
          "name" : "account_id",
          "in" : "path",
          "description" : "The ID of the account.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the routing detail.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/routing_detail"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "RoutingDetail" ],
        "summary" : "delete routing_detail",
        "description" : "Delete a routing detail for a single external account.",
        "operationId" : "deleteRoutingDetail",
        "parameters" : [ {
          "name" : "accounts_type",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "external_accounts" ]
          }
        }, {
          "name" : "account_id",
          "in" : "path",
          "description" : "The ID of the account.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the routing detail.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "successful"
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/simulations/incoming_payment_details/create_async" : {
      "post" : {
        "tags" : [ "IncomingPaymentDetail" ],
        "summary" : "create async incoming payment detail",
        "description" : "Simulate Incoming Payment Detail",
        "operationId" : "createAsyncIncomingPaymentDetail",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/incoming_payment_detail_create_request"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/async_response"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "405" : {
            "description" : "not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/transactions/{transaction_id}/line_items" : {
      "get" : {
        "tags" : [ "TransactionLineItem" ],
        "summary" : "list transaction_line_items",
        "description" : "This endpoint has been deprecated in favor of /api/transaction_line_items",
        "operationId" : "listTransactionLineItems",
        "parameters" : [ {
          "name" : "transaction_id",
          "in" : "path",
          "description" : "transaction_id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "originating", "receiving" ]
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/transaction_line_item"
                  }
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/transaction_line_items" : {
      "get" : {
        "tags" : [ "TransactionLineItem" ],
        "summary" : "list transaction_line_items",
        "operationId" : "listTransactionLineItems",
        "parameters" : [ {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "id",
          "in" : "query",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "originating", "receiving" ]
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "transaction_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/transaction_line_item"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/transaction_line_items/{id}" : {
      "get" : {
        "tags" : [ "TransactionLineItem" ],
        "summary" : "get transaction line item",
        "operationId" : "listTransactionLineItems",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/transaction_line_item"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/transactions" : {
      "get" : {
        "tags" : [ "Transaction" ],
        "summary" : "list transactions",
        "description" : "Get a list of all transactions.",
        "operationId" : "listTransactions",
        "parameters" : [ {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "internal_account_id",
          "in" : "query",
          "description" : "Specify `internal_account_id` if you wish to see transactions to/from a specific account.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "virtual_account_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "posted",
          "in" : "query",
          "description" : "Either `true` or `false`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "as_of_date_start",
          "in" : "query",
          "description" : "Filters transactions with an `as_of_date` starting on or after the specified date (YYYY-MM-DD).",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "as_of_date_end",
          "in" : "query",
          "description" : "Filters transactions with an `as_of_date` starting on or before the specified date (YYYY-MM-DD).",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "direction",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "counterparty_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "payment_type",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "transactable_type",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "description",
          "in" : "query",
          "description" : "Filters for transactions including the queried string in the description.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vendor_id",
          "in" : "query",
          "description" : "Filters for transactions including the queried vendor id (an identifier given to transactions by the bank).",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "metadata",
          "in" : "query",
          "description" : "For example, if you want to query for records with metadata key `Type` and value `Loan`, the query would be `metadata%5BType%5D=Loan`. This encodes the query parameters.",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/transaction"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/transactions/{id}" : {
      "get" : {
        "tags" : [ "Transaction" ],
        "summary" : "get transaction",
        "description" : "Get details on a single transaction.",
        "operationId" : "getTransaction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Transaction ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/transaction"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "Transaction" ],
        "summary" : "update transaction",
        "description" : "Update a single transaction.",
        "operationId" : "updateTransaction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Transaction ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/transaction_update_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/transaction"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/validations/routing_numbers" : {
      "get" : {
        "tags" : [ "Validation" ],
        "summary" : "validate routing numbers",
        "description" : "Validates the routing number information supplied without creating a routing detail",
        "operationId" : "validateRoutingNumber",
        "parameters" : [ {
          "name" : "routing_number",
          "in" : "query",
          "description" : "The routing number that is being validated.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "routing_number_type",
          "in" : "query",
          "description" : "One of `aba`, `au_bsb`, `br_codigo`, `ca_cpa`, `cnaps`, `gb_sort_code`, `in_ifsc`, `my_branch_code`, `se_bankgiro_clearing_code`, or `swift`. In sandbox mode we currently only support `aba` and `swift` with routing numbers '123456789' and 'GRINUST0XXX' respectively.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "aba", "au_bsb", "br_codigo", "ca_cpa", "chips", "cnaps", "gb_sort_code", "in_ifsc", "jp_zengin_code", "my_branch_code", "se_bankgiro_clearing_code", "swift" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful valid routing number and type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/routing_number_lookup_request"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful with invalid parameter",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/virtual_accounts" : {
      "get" : {
        "tags" : [ "VirtualAccount" ],
        "summary" : "list virtual_accounts",
        "description" : "Get a list of virtual accounts.",
        "operationId" : "listVirtualAccounts",
        "parameters" : [ {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "internal_account_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "counterparty_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "metadata",
          "in" : "query",
          "description" : "For example, if you want to query for records with metadata key `Type` and value `Loan`, the query would be `metadata%5BType%5D=Loan`. This encodes the query parameters.",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/virtual_account"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "VirtualAccount" ],
        "summary" : "create virtual_account",
        "operationId" : "createVirtualAccount",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/virtual_account_create_request"
              }
            }
          }
        },
        "responses" : {
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "201" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/virtual_account"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/virtual_accounts/{id}" : {
      "get" : {
        "tags" : [ "VirtualAccount" ],
        "summary" : "get virtual_account",
        "operationId" : "getVirtualAccount",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Virtual Acccount ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/virtual_account"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "VirtualAccount" ],
        "summary" : "delete virtual_account",
        "operationId" : "deleteVirtualAccount",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Virtual Acccount ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/virtual_account"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "VirtualAccount" ],
        "summary" : "update virtual_account",
        "operationId" : "updateVirtualAccount",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Virtual Acccount ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/virtual_account_update_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/virtual_account"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/account_collection_flows" : {
      "get" : {
        "tags" : [ "AccountCollectionFlow" ],
        "summary" : "list account_collection_flows",
        "operationId" : "listAccountCollectionFlows",
        "parameters" : [ {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "client_token",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "counterparty_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "external_account_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/account_collection_flow"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "AccountCollectionFlow" ],
        "summary" : "create account_collection_flow",
        "operationId" : "createAccountCollectionFlow",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/account_collection_flow_create_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/account_collection_flow"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/account_collection_flows/{id}" : {
      "get" : {
        "tags" : [ "AccountCollectionFlow" ],
        "summary" : "get account_collection_flow",
        "operationId" : "getAccountCollectionFlow",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/account_collection_flow"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "AccountCollectionFlow" ],
        "summary" : "update account_collection_flow",
        "operationId" : "updateAccountCollectionFlow",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/account_collection_flow_update_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/account_collection_flow"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/payment_flows" : {
      "get" : {
        "tags" : [ "PaymentFlow" ],
        "summary" : "list payment_flows",
        "operationId" : "listPaymentFlows",
        "parameters" : [ {
          "name" : "after_cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "per_page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "client_token",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "counterparty_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "receiving_account_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "originating_account_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "payment_order_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "headers" : {
              "X-After-Cursor" : {
                "description" : "The cursor for the next page. Including this in a call as `after_cursor` will return the next page.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "nullable" : true
                }
              },
              "X-Per-Page" : {
                "description" : "The current `per_page`.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "nullable" : true
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/payment_flow"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "PaymentFlow" ],
        "summary" : "create payment_flow",
        "operationId" : "createPaymentFlow",
        "parameters" : [ {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/payment_flow_create_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/payment_flow"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    },
    "/api/payment_flows/{id}" : {
      "get" : {
        "tags" : [ "PaymentFlow" ],
        "summary" : "get payment_flow",
        "operationId" : "getPaymentFlow",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/payment_flow"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "PaymentFlow" ],
        "summary" : "update payment_flow",
        "operationId" : "updatePaymentFlow",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "This key should be something unique, preferably something like an UUID.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/payment_flow_update_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/payment_flow"
                }
              }
            }
          },
          "404" : {
            "description" : "not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          },
          "422" : {
            "description" : "unsuccessful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error_message"
                }
              }
            }
          }
        },
        "security" : [ {
          "basic_auth" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "accounting" : {
        "type" : "object",
        "properties" : {
          "account_id" : {
            "type" : "string",
            "description" : "The ID of one of your accounting categories. Note that these will only be accessible if your accounting system has been connected.",
            "format" : "uuid",
            "nullable" : true
          },
          "class_id" : {
            "type" : "string",
            "description" : "The ID of one of the class objects in your accounting system. Class objects track segments of your business independent of client or project. Note that these will only be accessible if your accounting system has been connected.",
            "format" : "uuid",
            "nullable" : true
          }
        }
      },
      "account_collection_flow" : {
        "minProperties" : 10,
        "required" : [ "counterparty_id", "payment_types" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "client_token" : {
            "type" : "string",
            "description" : "The client token of the account collection flow.  This token can be used to embed account collection in your client-side application."
          },
          "status" : {
            "type" : "string",
            "description" : "The current status of the account collection flow. One of `pending`, `completed`, `expired`, or `cancelled`.",
            "enum" : [ "cancelled", "completed", "expired", "pending" ]
          },
          "counterparty_id" : {
            "type" : "string",
            "description" : "The ID of a counterparty. An external account created with this flow will be associated with this counterparty.",
            "format" : "uuid"
          },
          "external_account_id" : {
            "type" : "string",
            "description" : "If present, the ID of the external account created using this flow.",
            "format" : "uuid",
            "nullable" : true
          },
          "payment_types" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "An account created with this flow will support payments of one of these types.",
              "enum" : [ "ach", "wire" ]
            }
          },
          "receiving_countries" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "An account created with this flow will support wires from the US to these countries.",
              "enum" : [ "USA", "AUS", "BEL", "CAN", "CHL", "CHN", "COL", "FRA", "DEU", "HKG", "IND", "IRL", "ITA", "MEX", "NLD", "PER", "ESP" ]
            }
          }
        },
        "additionalProperties" : false
      },
      "account_collection_flow_create_request" : {
        "required" : [ "counterparty_id", "payment_types" ],
        "type" : "object",
        "properties" : {
          "counterparty_id" : {
            "type" : "string",
            "description" : "Required.",
            "format" : "uuid"
          },
          "payment_types" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Required. At least one of `ach`, `wire` or `check`."
            }
          },
          "receiving_countries" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Optional. Array of 3-digit ISO country codes.",
              "enum" : [ "USA", "AUS", "BEL", "CAN", "CHL", "CHN", "COL", "FRA", "DEU", "HKG", "IND", "IRL", "ITA", "MEX", "NLD", "PER", "ESP" ]
            }
          }
        }
      },
      "account_collection_flow_update_request" : {
        "required" : [ "status" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Required. The updated status of the account collection flow. Can only be used to mark a flow as `cancelled`.",
            "enum" : [ "cancelled" ]
          }
        }
      },
      "account_detail" : {
        "maxProperties" : 9,
        "minProperties" : 8,
        "required" : [ "account_number_safe", "account_number_type", "created_at", "discarded_at", "id", "live_mode", "object", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "discarded_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "account_number" : {
            "type" : "string",
            "description" : "The account number for the bank account."
          },
          "account_number_type" : {
            "type" : "string",
            "description" : "One of `iban`, `clabe`, `wallet_address`, or `other`. Use `other` if the bank account number is in a generic format.",
            "enum" : [ "clabe", "iban", "other", "pan", "wallet_address" ]
          },
          "account_number_safe" : {
            "type" : "string",
            "description" : "The last 4 digits of the account_number."
          }
        },
        "additionalProperties" : false
      },
      "account_detail_create_request" : {
        "required" : [ "account_number" ],
        "type" : "object",
        "properties" : {
          "account_number" : {
            "type" : "string",
            "description" : "The account number for the bank account."
          },
          "account_number_type" : {
            "type" : "string",
            "description" : "One of `iban`, `clabe`, `wallet_address`, or `other`. Use `other` if the bank account number is in a generic format.",
            "enum" : [ "clabe", "iban", "other", "pan", "wallet_address" ]
          }
        }
      },
      "address" : {
        "minProperties" : 11,
        "required" : [ "country", "created_at", "id", "line1", "line2", "live_mode", "locality", "object", "postal_code", "region", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "line1" : {
            "type" : "string",
            "nullable" : true
          },
          "line2" : {
            "type" : "string",
            "nullable" : true
          },
          "locality" : {
            "type" : "string",
            "description" : "Locality or City.",
            "nullable" : true
          },
          "region" : {
            "type" : "string",
            "description" : "Region or State.",
            "nullable" : true
          },
          "postal_code" : {
            "type" : "string",
            "description" : "The postal code of the address.",
            "nullable" : true
          },
          "country" : {
            "type" : "string",
            "description" : "Country code conforms to [ISO 3166-1 alpha-2]",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "nullable" : true
      },
      "address_request" : {
        "type" : "object",
        "properties" : {
          "line1" : {
            "type" : "string",
            "nullable" : true
          },
          "line2" : {
            "type" : "string",
            "nullable" : true
          },
          "locality" : {
            "type" : "string",
            "description" : "Locality or City.",
            "nullable" : true
          },
          "region" : {
            "type" : "string",
            "description" : "Region or State.",
            "nullable" : true
          },
          "postal_code" : {
            "type" : "string",
            "description" : "The postal code of the address.",
            "nullable" : true
          },
          "country" : {
            "type" : "string",
            "description" : "Country code conforms to [ISO 3166-1 alpha-2]",
            "nullable" : true
          }
        }
      },
      "async_response" : {
        "minProperties" : 2,
        "required" : [ "id", "object" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "balance_report" : {
        "minProperties" : 10,
        "required" : [ "as_of_date", "as_of_time", "balance_report_type", "balances", "created_at", "id", "internal_account_id", "live_mode", "object", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "balance_report_type" : {
            "type" : "string",
            "description" : "The specific type of balance report. One of `intraday`, `previous_day`, `real_time`, or `other`.",
            "enum" : [ "intraday", "other", "previous_day", "real_time" ]
          },
          "as_of_date" : {
            "type" : "string",
            "description" : "The date of the balance report in local time.",
            "format" : "date"
          },
          "as_of_time" : {
            "type" : "string",
            "description" : "The time (24-hour clock) of the balance report in local time.",
            "format" : "time",
            "nullable" : true
          },
          "balances" : {
            "type" : "array",
            "description" : "An array of `Balance` objects.",
            "items" : {
              "$ref" : "#/components/schemas/balance"
            }
          },
          "internal_account_id" : {
            "type" : "string",
            "description" : "The ID of one of your organization's Internal Accounts.",
            "format" : "uuid"
          }
        },
        "additionalProperties" : false
      },
      "balance" : {
        "minProperties" : 10,
        "required" : [ "amount", "balance_type", "created_at", "currency", "id", "live_mode", "object", "updated_at", "vendor_code", "vendor_code_type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amount" : {
            "type" : "integer",
            "description" : "The balance amount."
          },
          "currency" : {
            "$ref" : "#/components/schemas/currency"
          },
          "balance_type" : {
            "type" : "string",
            "description" : "The specific type of balance reported. One of `opening_ledger`, `closing_ledger`, `current_ledger`, `opening_available`, `opening_available_next_business_day`, `closing_available`, `current_available`, or `other`.",
            "enum" : [ "closing_available", "closing_ledger", "current_available", "current_ledger", "opening_available", "opening_available_next_business_day", "opening_ledger", "other" ]
          },
          "vendor_code" : {
            "type" : "string",
            "description" : "The code used by the bank when reporting this specific balance."
          },
          "vendor_code_type" : {
            "type" : "string",
            "description" : "The code used by the bank when reporting this specific balance.",
            "nullable" : true,
            "enum" : [ "bai2", "bankprov", "bnk_dev", "cleartouch", "column", "cross_river", "currencycloud", "dc_bank", "dwolla", "evolve", "goldman_sachs", "iso20022", "jpmc", "mx", "plaid", "rspec_vendor", "signet", "silvergate", "swift", "us_bank" ]
          }
        },
        "additionalProperties" : false
      },
      "connection" : {
        "minProperties" : 9,
        "required" : [ "created_at", "discarded_at", "id", "live_mode", "object", "updated_at", "vendor_customer_id", "vendor_id", "vendor_name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "discarded_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "vendor_id" : {
            "type" : "string",
            "description" : "Unique identifier for the bank or vendor.",
            "format" : "uuid"
          },
          "vendor_customer_id" : {
            "type" : "string",
            "description" : "An identifier given to this connection by the bank.",
            "format" : "uuid",
            "nullable" : true
          },
          "vendor_name" : {
            "type" : "string",
            "description" : "A human-friendly name for the bank or vendor."
          }
        },
        "additionalProperties" : false
      },
      "contact_detail" : {
        "minProperties" : 8,
        "required" : [ "contact_identifier", "contact_identifier_type", "created_at", "discarded_at", "id", "live_mode", "object", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "discarded_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "contact_identifier" : {
            "type" : "string"
          },
          "contact_identifier_type" : {
            "type" : "string",
            "enum" : [ "email", "phone_number", "website" ]
          }
        },
        "additionalProperties" : false
      },
      "contact_detail_create_request" : {
        "type" : "object",
        "properties" : {
          "contact_identifier" : {
            "type" : "string"
          },
          "contact_identifier_type" : {
            "type" : "string",
            "enum" : [ "email", "phone_number", "website" ]
          }
        }
      },
      "counterparty" : {
        "minProperties" : 12,
        "required" : [ "accounts", "created_at", "discarded_at", "email", "id", "live_mode", "metadata", "name", "object", "send_remittance_advice", "updated_at", "verification_status" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "discarded_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "description" : "A human friendly name for this counterparty.",
            "nullable" : true
          },
          "accounts" : {
            "type" : "array",
            "description" : "The accounts for this counterparty.",
            "items" : {
              "$ref" : "#/components/schemas/counterparty_accounts"
            }
          },
          "email" : {
            "type" : "string",
            "description" : "The counterparty's email.",
            "format" : "email",
            "nullable" : true
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "send_remittance_advice" : {
            "type" : "boolean",
            "description" : "Send an email to the counterparty whenever an associated payment order is sent to the bank."
          },
          "verification_status" : {
            "type" : "string",
            "description" : "The verification status of the counterparty.",
            "enum" : [ "denied", "needs_approval", "unverified", "verified" ]
          }
        },
        "additionalProperties" : false
      },
      "counterparty_collect_account_request" : {
        "required" : [ "direction" ],
        "type" : "object",
        "properties" : {
          "direction" : {
            "type" : "string",
            "description" : "One of `credit` or `debit`. Use `credit` when you want to pay a counterparty. Use `debit` when you need to charge a counterparty. This field helps us send a more tailored email to your counterparties.\"",
            "enum" : [ "credit", "debit" ]
          },
          "send_email" : {
            "type" : "boolean",
            "description" : "By default, Modern Treasury will send an email to your counterparty that includes a link to the form they must fill out. However, if you would like to send the counterparty the link, you can set this parameter to `false`. The JSON body will include the link to the secure Modern Treasury form."
          },
          "fields" : {
            "type" : "array",
            "description" : "The list of fields you want on the form. This field is optional and if it is not set, will default to [\\\"nameOnAccount\\\", \\\"accountType\\\", \\\"accountNumber\\\", \\\"routingNumber\\\", \\\"address\\\"]. The full list of options is [\\\"name\\\", \\\"nameOnAccount\\\", \\\"taxpayerIdentifier\\\", \\\"accountType\\\", \\\"accountNumber\\\", \\\"routingNumber\\\", \\\"address\\\", \\\"ibanNumber\\\", \\\"swiftCode\\\"].",
            "items" : {
              "type" : "string",
              "enum" : [ "name", "nameOnAccount", "taxpayerIdentifier", "accountType", "accountNumber", "ibanNumber", "clabeNumber", "walletAddress", "panNumber", "routingNumber", "abaWireRoutingNumber", "swiftCode", "auBsb", "caCpa", "cnaps", "gbSortCode", "inIfsc", "myBranchCode", "brCodigo", "routingNumberType", "address", "jp_zengin_code" ]
            }
          },
          "custom_redirect" : {
            "type" : "string",
            "description" : "The URL you want your customer to visit upon filling out the form. By default, they will be sent to a Modern Treasury landing page. This must be a valid HTTPS URL if set.",
            "format" : "uri"
          }
        }
      },
      "counterparty_collect_account_response" : {
        "minProperties" : 3,
        "required" : [ "form_link", "id", "is_resend" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The id of the existing counterparty."
          },
          "is_resend" : {
            "type" : "boolean",
            "description" : "This field will be `true` if an email requesting account details has already been sent to this counterparty."
          },
          "form_link" : {
            "type" : "string",
            "description" : "This is the link to the secure Modern Treasury form. By default, Modern Treasury will send an email to your counterparty that includes a link to this form. However, if `send_email` is passed as `false` in the body then Modern Treasury will not send the email and you can send it to the counterparty directly.",
            "format" : "uri"
          }
        },
        "additionalProperties" : false
      },
      "counterparty_create_request" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "A human friendly name for this counterparty.",
            "nullable" : true
          },
          "accounts" : {
            "type" : "array",
            "description" : "The accounts for this counterparty.",
            "items" : {
              "$ref" : "#/components/schemas/counterparty_create_request_accounts"
            }
          },
          "email" : {
            "type" : "string",
            "description" : "The counterparty's email.",
            "format" : "email",
            "nullable" : true
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "send_remittance_advice" : {
            "type" : "boolean",
            "description" : "Send an email to the counterparty whenever an associated payment order is sent to the bank."
          },
          "verification_status" : {
            "type" : "string",
            "description" : "The verification status of the counterparty.",
            "enum" : [ "denied", "needs_approval", "unverified", "verified" ]
          },
          "accounting" : {
            "$ref" : "#/components/schemas/counterparty_create_request_accounting"
          },
          "ledger_type" : {
            "type" : "string",
            "description" : "An optional type to auto-sync the counterparty to your ledger. Either `customer` or `vendor`.",
            "deprecated" : true,
            "enum" : [ "customer", "vendor" ]
          },
          "taxpayer_identifier" : {
            "type" : "string",
            "description" : "Either a valid SSN or EIN."
          }
        }
      },
      "counterparty_update_request" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "A new name for the counterparty. Will only update if passed."
          },
          "email" : {
            "type" : "string",
            "description" : "A new email for the counterparty.",
            "format" : "email"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data in the form of key-value pairs. Pairs can be removed by passing an empty string or `null` as the value."
          },
          "send_remittance_advice" : {
            "type" : "boolean",
            "description" : "If this is `true`, Modern Treasury will send an email to the counterparty whenever an associated payment order is sent to the bank."
          },
          "taxpayer_identifier" : {
            "type" : "string",
            "description" : "Either a valid SSN or EIN."
          }
        }
      },
      "currency" : {
        "type" : "string",
        "description" : "Three-letter ISO currency code.",
        "enum" : [ "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNH", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EEK", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GBX", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MRU", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SKK", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMM", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XCD", "XDR", "XFU", "XOF", "XPD", "XPF", "XPT", "XTS", "YER", "ZAR", "ZMK", "ZMW", "ZWD", "ZWL", "ZWN", "ZWR" ]
      },
      "document" : {
        "minProperties" : 12,
        "required" : [ "created_at", "discarded_at", "document_details", "document_type", "documentable_id", "documentable_type", "file", "id", "live_mode", "object", "source", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "discarded_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "document_type" : {
            "type" : "string",
            "description" : "A category given to the document, can be `null`.",
            "nullable" : true
          },
          "source" : {
            "type" : "string",
            "description" : "The source of the document. Can be `vendor`, `customer`, or `modern_treasury`."
          },
          "documentable_id" : {
            "type" : "string",
            "description" : "The unique identifier for the associated object.",
            "format" : "uuid"
          },
          "documentable_type" : {
            "type" : "string",
            "description" : "The type of the associated object. Currently can be one of `payment_order`, `transaction`, `paper_item`, `expected_payment`, `counterparty`, `organization`, `case`, `internal_account`, `decision`, or `external_account`.",
            "enum" : [ "case", "counterparty", "expected_payment", "external_account", "internal_account", "organization", "paper_item", "payment_order", "transaction", "decision", "connection" ]
          },
          "document_details" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/document_detail"
            }
          },
          "file" : {
            "$ref" : "#/components/schemas/document_file"
          }
        },
        "additionalProperties" : false
      },
      "document_create_request" : {
        "required" : [ "documentable_id", "documentable_type", "file" ],
        "type" : "object",
        "properties" : {
          "documentable_id" : {
            "type" : "string",
            "description" : "The unique identifier for the associated object."
          },
          "documentable_type" : {
            "type" : "string",
            "enum" : [ "cases", "counterparties", "expected_payments", "external_accounts", "internal_accounts", "organizations", "paper_items", "payment_orders", "transactions", "decisions", "connections" ]
          },
          "document_type" : {
            "type" : "string",
            "description" : "A category given to the document, can be `null`."
          },
          "file" : {
            "type" : "string",
            "format" : "binary"
          }
        }
      },
      "legacy_document_create_request" : {
        "required" : [ "file" ],
        "type" : "object",
        "properties" : {
          "document_type" : {
            "type" : "string",
            "description" : "A category given to the document, can be `null`."
          },
          "file" : {
            "type" : "string",
            "format" : "binary"
          }
        }
      },
      "document_detail" : {
        "minProperties" : 8,
        "required" : [ "created_at", "discarded_at", "document_identifier", "document_identifier_type", "id", "live_mode", "object", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "discarded_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "document_identifier_type" : {
            "type" : "string"
          },
          "document_identifier" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "error_message" : {
        "required" : [ "errors" ],
        "type" : "object",
        "properties" : {
          "errors" : {
            "$ref" : "#/components/schemas/error_message_errors"
          }
        }
      },
      "event" : {
        "minProperties" : 10,
        "required" : [ "created_at", "data", "entity_id", "event_name", "event_time", "id", "live_mode", "object", "resource", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "resource" : {
            "type" : "string",
            "description" : "The type of resource for the event."
          },
          "event_name" : {
            "type" : "string",
            "description" : "The name of the event."
          },
          "event_time" : {
            "type" : "string",
            "description" : "The time of the event.",
            "format" : "date-time"
          },
          "data" : {
            "type" : "object",
            "description" : "The body of the event."
          },
          "entity_id" : {
            "type" : "string",
            "description" : "The ID of the entity for the event."
          }
        },
        "additionalProperties" : false
      },
      "expected_payment" : {
        "minProperties" : 25,
        "required" : [ "amount_lower_bound", "amount_upper_bound", "counterparty_id", "created_at", "currency", "date_lower_bound", "date_upper_bound", "description", "direction", "id", "internal_account_id", "ledger_transaction_id", "live_mode", "metadata", "object", "reconciliation_filters", "reconciliation_groups", "reconciliation_method", "remittance_information", "statement_descriptor", "status", "transaction_id", "transaction_line_item_id", "type", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amount_upper_bound" : {
            "type" : "integer",
            "description" : "The highest amount this expected payment may be equal to. Value in specified currency's smallest unit. e.g. $10 would be represented as 1000."
          },
          "amount_lower_bound" : {
            "type" : "integer",
            "description" : "The lowest amount this expected payment may be equal to. Value in specified currency's smallest unit. e.g. $10 would be represented as 1000."
          },
          "direction" : {
            "type" : "string",
            "description" : "One of credit or debit. When you are receiving money, use credit. When you are being charged, use debit.",
            "enum" : [ "credit", "debit" ]
          },
          "internal_account_id" : {
            "type" : "string",
            "description" : "The ID of the Internal Account for the expected payment.",
            "format" : "uuid"
          },
          "type" : {
            "type" : "string",
            "description" : "One of: ach, au_becs, bacs, book, check, eft, interac, provxchange, rtp, sen, sepa, signet, wire.",
            "nullable" : true,
            "enum" : [ "ach", "au_becs", "bacs", "book", "card", "check", "cross_border", "eft", "interac", "masav", "neft", "nics", "provxchange", "rtp", "se_bankgirot", "sen", "sepa", "sic", "signet", "wire", "zengin" ]
          },
          "currency" : {
            "$ref" : "#/components/schemas/currency"
          },
          "date_upper_bound" : {
            "type" : "string",
            "description" : "The latest date the payment may come in. Format: yyyy-mm-dd",
            "format" : "date",
            "nullable" : true
          },
          "date_lower_bound" : {
            "type" : "string",
            "description" : "The earliest date the payment may come in. Format: yyyy-mm-dd",
            "format" : "date",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "description" : "An optional description for internal use.",
            "nullable" : true
          },
          "statement_descriptor" : {
            "type" : "string",
            "description" : "The statement description you expect to see on the transaction. For ACH payments, this will be the full line item passed from the bank. For wire payments, this will be the OBI field on the wire. For check payments, this will be the memo field.",
            "nullable" : true
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "counterparty_id" : {
            "type" : "string",
            "description" : "The ID of the counterparty you expect for this payment.",
            "format" : "uuid",
            "nullable" : true
          },
          "remittance_information" : {
            "type" : "string",
            "description" : "For `ach`, this field will be passed through on an addenda record. For `wire` payments the field will be passed through as the \"Originator to Beneficiary Information\", also known as OBI or Fedwire tag 6000.",
            "nullable" : true
          },
          "reconciliation_groups" : {
            "type" : "object",
            "description" : "The reconciliation groups you have for this payment.",
            "nullable" : true
          },
          "reconciliation_filters" : {
            "type" : "object",
            "description" : "The reconciliation filters you have for this payment.",
            "nullable" : true
          },
          "transaction_id" : {
            "type" : "string",
            "description" : "The ID of the Transaction this expected payment object has been matched to.",
            "format" : "uuid",
            "nullable" : true
          },
          "transaction_line_item_id" : {
            "type" : "string",
            "description" : "The ID of the Transaction Line Item this expected payment has been matched to.",
            "format" : "uuid",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "description" : "One of unreconciled, reconciled, or archived.",
            "enum" : [ "archived", "partially_reconciled", "reconciled", "unreconciled" ]
          },
          "reconciliation_method" : {
            "type" : "string",
            "description" : "One of manual if this expected payment was manually reconciled in the dashboard, automatic if it was automatically reconciled by Modern Treasury, or null if it is unreconciled.",
            "nullable" : true,
            "enum" : [ "automatic", "manual" ]
          },
          "ledger_transaction_id" : {
            "type" : "string",
            "description" : "The ID of the ledger transaction linked to the expected payment.",
            "format" : "uuid",
            "nullable" : true
          }
        },
        "additionalProperties" : false
      },
      "expected_payment_create_request" : {
        "required" : [ "amount_lower_bound", "amount_upper_bound", "direction", "internal_account_id" ],
        "type" : "object",
        "properties" : {
          "amount_upper_bound" : {
            "type" : "integer",
            "description" : "The highest amount this expected payment may be equal to. Value in specified currency's smallest unit. e.g. $10 would be represented as 1000."
          },
          "amount_lower_bound" : {
            "type" : "integer",
            "description" : "The lowest amount this expected payment may be equal to. Value in specified currency's smallest unit. e.g. $10 would be represented as 1000."
          },
          "direction" : {
            "type" : "string",
            "description" : "One of credit or debit. When you are receiving money, use credit. When you are being charged, use debit.",
            "enum" : [ "credit", "debit" ]
          },
          "internal_account_id" : {
            "type" : "string",
            "description" : "The ID of the Internal Account for the expected payment.",
            "format" : "uuid"
          },
          "type" : {
            "type" : "string",
            "description" : "One of: ach, au_becs, bacs, book, check, eft, interac, provxchange, rtp, sen, sepa, signet, wire.",
            "nullable" : true,
            "enum" : [ "ach", "au_becs", "bacs", "book", "card", "check", "cross_border", "eft", "interac", "masav", "neft", "nics", "provxchange", "rtp", "se_bankgirot", "sen", "sepa", "sic", "signet", "wire", "zengin" ]
          },
          "currency" : {
            "$ref" : "#/components/schemas/currency"
          },
          "date_upper_bound" : {
            "type" : "string",
            "description" : "The latest date the payment may come in. Format: yyyy-mm-dd",
            "format" : "date",
            "nullable" : true
          },
          "date_lower_bound" : {
            "type" : "string",
            "description" : "The earliest date the payment may come in. Format: yyyy-mm-dd",
            "format" : "date",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "description" : "An optional description for internal use.",
            "nullable" : true
          },
          "statement_descriptor" : {
            "type" : "string",
            "description" : "The statement description you expect to see on the transaction. For ACH payments, this will be the full line item passed from the bank. For wire payments, this will be the OBI field on the wire. For check payments, this will be the memo field.",
            "nullable" : true
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "counterparty_id" : {
            "type" : "string",
            "description" : "The ID of the counterparty you expect for this payment.",
            "format" : "uuid",
            "nullable" : true
          },
          "remittance_information" : {
            "type" : "string",
            "description" : "For `ach`, this field will be passed through on an addenda record. For `wire` payments the field will be passed through as the \"Originator to Beneficiary Information\", also known as OBI or Fedwire tag 6000.",
            "nullable" : true
          },
          "reconciliation_groups" : {
            "type" : "object",
            "description" : "The reconciliation groups you have for this payment.",
            "nullable" : true
          },
          "reconciliation_filters" : {
            "type" : "object",
            "description" : "The reconciliation filters you have for this payment.",
            "nullable" : true
          },
          "line_items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/line_item_request"
            }
          }
        }
      },
      "expected_payment_update_request" : {
        "type" : "object",
        "properties" : {
          "amount_upper_bound" : {
            "type" : "integer",
            "description" : "The highest amount this expected payment may be equal to. Value in specified currency's smallest unit. e.g. $10 would be represented as 1000."
          },
          "amount_lower_bound" : {
            "type" : "integer",
            "description" : "The lowest amount this expected payment may be equal to. Value in specified currency's smallest unit. e.g. $10 would be represented as 1000."
          },
          "direction" : {
            "type" : "string",
            "description" : "One of credit or debit. When you are receiving money, use credit. When you are being charged, use debit.",
            "enum" : [ "credit", "debit" ]
          },
          "internal_account_id" : {
            "type" : "string",
            "description" : "The ID of the Internal Account for the expected payment.",
            "format" : "uuid"
          },
          "type" : {
            "type" : "string",
            "description" : "One of: ach, au_becs, bacs, book, check, eft, interac, provxchange, rtp, sen, sepa, signet, wire.",
            "nullable" : true,
            "enum" : [ "ach", "au_becs", "bacs", "book", "card", "check", "cross_border", "eft", "interac", "masav", "neft", "nics", "provxchange", "rtp", "se_bankgirot", "sen", "sepa", "sic", "signet", "wire", "zengin" ]
          },
          "currency" : {
            "$ref" : "#/components/schemas/currency"
          },
          "date_upper_bound" : {
            "type" : "string",
            "description" : "The latest date the payment may come in. Format: yyyy-mm-dd",
            "format" : "date",
            "nullable" : true
          },
          "date_lower_bound" : {
            "type" : "string",
            "description" : "The earliest date the payment may come in. Format: yyyy-mm-dd",
            "format" : "date",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "description" : "An optional description for internal use.",
            "nullable" : true
          },
          "statement_descriptor" : {
            "type" : "string",
            "description" : "The statement description you expect to see on the transaction. For ACH payments, this will be the full line item passed from the bank. For wire payments, this will be the OBI field on the wire. For check payments, this will be the memo field.",
            "nullable" : true
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "counterparty_id" : {
            "type" : "string",
            "description" : "The ID of the counterparty you expect for this payment.",
            "format" : "uuid",
            "nullable" : true
          },
          "remittance_information" : {
            "type" : "string",
            "description" : "For `ach`, this field will be passed through on an addenda record. For `wire` payments the field will be passed through as the \"Originator to Beneficiary Information\", also known as OBI or Fedwire tag 6000.",
            "nullable" : true
          },
          "reconciliation_groups" : {
            "type" : "object",
            "description" : "The reconciliation groups you have for this payment.",
            "nullable" : true
          },
          "reconciliation_filters" : {
            "type" : "object",
            "description" : "The reconciliation filters you have for this payment.",
            "nullable" : true
          }
        }
      },
      "external_account" : {
        "minProperties" : 18,
        "required" : [ "account_details", "account_type", "contact_details", "counterparty_id", "created_at", "discarded_at", "id", "ledger_account_id", "live_mode", "metadata", "name", "object", "party_address", "party_name", "party_type", "routing_details", "updated_at", "verification_status" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "discarded_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "account_type" : {
            "type" : "string",
            "description" : "Can be `checking`, `savings` or `other`.",
            "enum" : [ "cash", "checking", "loan", "non_resident", "other", "overdraft", "savings" ]
          },
          "party_type" : {
            "type" : "string",
            "description" : "Either `individual` or `business`.",
            "nullable" : true,
            "enum" : [ "business", "individual" ]
          },
          "party_address" : {
            "$ref" : "#/components/schemas/address"
          },
          "name" : {
            "type" : "string",
            "description" : "A nickname for the external account. This is only for internal usage and won't affect any payments",
            "nullable" : true
          },
          "counterparty_id" : {
            "type" : "string",
            "format" : "uuid",
            "nullable" : true
          },
          "account_details" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/account_detail"
            }
          },
          "routing_details" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/routing_detail"
            }
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "party_name" : {
            "type" : "string",
            "description" : "The legal name of the entity which owns the account."
          },
          "contact_details" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/contact_detail"
            }
          },
          "ledger_account_id" : {
            "type" : "string",
            "description" : "If the external account links to a ledger account in Modern Treasury, the id of the ledger account will be populated here.",
            "format" : "uuid",
            "nullable" : true
          },
          "verification_status" : {
            "type" : "string",
            "enum" : [ "pending_verification", "unverified", "verified" ]
          }
        },
        "additionalProperties" : false
      },
      "external_account_complete_verification_request" : {
        "type" : "object",
        "properties" : {
          "amounts" : {
            "maxItems" : 2,
            "type" : "array",
            "example" : [ 2, 4 ],
            "items" : {
              "type" : "integer"
            }
          }
        }
      },
      "external_account_create_request" : {
        "required" : [ "counterparty_id" ],
        "type" : "object",
        "properties" : {
          "account_type" : {
            "type" : "string",
            "description" : "Can be `checking`, `savings` or `other`.",
            "enum" : [ "cash", "checking", "loan", "non_resident", "other", "overdraft", "savings" ]
          },
          "party_type" : {
            "type" : "string",
            "description" : "Either `individual` or `business`.",
            "nullable" : true,
            "enum" : [ "business", "individual" ]
          },
          "party_address" : {
            "$ref" : "#/components/schemas/address_request"
          },
          "name" : {
            "type" : "string",
            "description" : "A nickname for the external account. This is only for internal usage and won't affect any payments",
            "nullable" : true
          },
          "counterparty_id" : {
            "type" : "string",
            "format" : "uuid",
            "nullable" : true
          },
          "account_details" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/counterparty_create_request_account_details"
            }
          },
          "routing_details" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/counterparty_create_request_routing_details"
            }
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "party_name" : {
            "type" : "string",
            "description" : "If this value isn't provided, it will be inherited from the counterparty's name."
          },
          "party_identifier" : {
            "type" : "string"
          },
          "ledger_account" : {
            "$ref" : "#/components/schemas/ledger_account_create_request"
          },
          "plaid_processor_token" : {
            "type" : "string",
            "description" : "If you've enabled the Modern Treasury + Plaid integration in your Plaid account, you can pass the processor token in this field."
          },
          "contact_details" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/contact_detail_create_request"
            }
          }
        }
      },
      "external_account_update_request" : {
        "type" : "object",
        "properties" : {
          "party_type" : {
            "type" : "string",
            "description" : "Either `individual` or `business`.",
            "nullable" : true,
            "enum" : [ "business", "individual" ]
          },
          "account_type" : {
            "type" : "string",
            "description" : "Can be `checking`, `savings` or `other`.",
            "enum" : [ "cash", "checking", "loan", "non_resident", "other", "overdraft", "savings" ]
          },
          "counterparty_id" : {
            "type" : "string",
            "format" : "uuid",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "description" : "A nickname for the external account. This is only for internal usage and won't affect any payments",
            "nullable" : true
          },
          "party_name" : {
            "type" : "string",
            "description" : "If this value isn't provided, it will be inherited from the counterparty's name."
          },
          "party_address" : {
            "$ref" : "#/components/schemas/address_request"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data in the form of key-value pairs. Pairs can be removed by passing an empty string or `null` as the value."
          }
        }
      },
      "external_account_verify_request" : {
        "required" : [ "originating_account_id", "payment_type" ],
        "type" : "object",
        "properties" : {
          "originating_account_id" : {
            "type" : "string",
            "description" : "The ID of the internal account where the micro-deposits originate from. Both credit and debit capabilities must be enabled.",
            "format" : "uuid"
          },
          "payment_type" : {
            "type" : "string",
            "description" : "Both ach and eft are supported payment types.",
            "enum" : [ "ach", "au_becs", "bacs", "book", "card", "check", "cross_border", "eft", "interac", "masav", "neft", "nics", "provxchange", "rtp", "se_bankgirot", "sen", "sepa", "sic", "signet", "wire", "zengin" ]
          },
          "currency" : {
            "$ref" : "#/components/schemas/currency"
          }
        }
      },
      "incoming_payment_detail_update_request" : {
        "type" : "object",
        "properties" : {
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data in the form of key-value pairs. Pairs can be removed by passing an empty string or `null` as the value."
          }
        }
      },
      "incoming_payment_detail" : {
        "minProperties" : 24,
        "required" : [ "amount", "as_of_date", "created_at", "currency", "data", "direction", "id", "internal_account_id", "ledger_transaction_id", "live_mode", "metadata", "object", "originating_account_number_safe", "originating_account_number_type", "originating_routing_number", "originating_routing_number_type", "status", "transaction_id", "transaction_line_item_id", "type", "updated_at", "vendor_id", "virtual_account", "virtual_account_id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "internal_account_id" : {
            "type" : "string",
            "description" : "The ID of the Internal Account for the incoming payment detail. This is always present.",
            "format" : "uuid"
          },
          "virtual_account_id" : {
            "type" : "string",
            "description" : "If the incoming payment detail is in a virtual account, the ID of the Virtual Account.",
            "format" : "uuid",
            "nullable" : true
          },
          "virtual_account" : {
            "$ref" : "#/components/schemas/virtual_account"
          },
          "transaction_line_item_id" : {
            "type" : "string",
            "description" : "The ID of the reconciled Transaction Line Item or `null`.",
            "format" : "uuid",
            "nullable" : true
          },
          "transaction_id" : {
            "type" : "string",
            "description" : "The ID of the reconciled Transaction or `null`.",
            "format" : "uuid",
            "nullable" : true
          },
          "ledger_transaction_id" : {
            "type" : "string",
            "description" : "The ID of the ledger transaction linked to the incoming payment detail or `null`.",
            "format" : "uuid",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "description" : "One of: `ach`, `book`, `check`, `eft`, `interac`, `rtp`, `sepa`, `signet`, or `wire`.",
            "enum" : [ "ach", "book", "check", "eft", "interac", "rtp", "sepa", "signet", "wire" ]
          },
          "data" : {
            "type" : "object",
            "description" : "The raw data from the payment pre-notification file that we get from the bank."
          },
          "amount" : {
            "type" : "integer",
            "description" : "Value in specified currency's smallest unit. e.g. $10 would be represented as 1000."
          },
          "currency" : {
            "$ref" : "#/components/schemas/currency"
          },
          "direction" : {
            "type" : "string",
            "description" : "One of `credit` or `debit`.",
            "enum" : [ "credit", "debit" ]
          },
          "status" : {
            "type" : "string",
            "description" : "The current status of the incoming payment order. One of `pending`, `completed`, or `returned`.",
            "enum" : [ "completed", "pending", "returned" ]
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "as_of_date" : {
            "type" : "string",
            "description" : "The date on which the corresponding transaction will occur.",
            "format" : "date"
          },
          "vendor_id" : {
            "type" : "string",
            "description" : "The identifier of the vendor bank.",
            "format" : "uuid",
            "nullable" : true
          },
          "originating_routing_number" : {
            "type" : "string",
            "description" : "The routing number of the originating account for the incoming payment detail.",
            "nullable" : true
          },
          "originating_routing_number_type" : {
            "type" : "string",
            "description" : "The type of the originating routing number for the incoming payment detail.",
            "nullable" : true,
            "enum" : [ "aba", "au_bsb", "br_codigo", "ca_cpa", "chips", "cnaps", "gb_sort_code", "in_ifsc", "jp_zengin_code", "my_branch_code", "se_bankgiro_clearing_code", "swift" ]
          },
          "originating_account_number" : {
            "type" : "string",
            "description" : "The account number of the originating account for the incoming payment detail.",
            "nullable" : true
          },
          "originating_account_number_safe" : {
            "type" : "string",
            "description" : "The last 4 digits of the originating account_number for the incoming payment detail.",
            "nullable" : true
          },
          "originating_account_number_type" : {
            "type" : "string",
            "description" : "The type of the originating account number for the incoming payment detail.",
            "nullable" : true,
            "enum" : [ "clabe", "iban", "other", "pan", "wallet_address" ]
          }
        },
        "additionalProperties" : false
      },
      "internal_account" : {
        "minProperties" : 18,
        "required" : [ "account_details", "account_type", "connection", "counterparty_id", "created_at", "currency", "id", "ledger_account_id", "live_mode", "metadata", "name", "object", "parent_account_id", "party_address", "party_name", "party_type", "routing_details", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "account_type" : {
            "type" : "string",
            "description" : "Can be checking, savings or other.",
            "nullable" : true,
            "enum" : [ "cash", "checking", "loan", "non_resident", "other", "overdraft", "savings" ]
          },
          "party_name" : {
            "type" : "string",
            "description" : "The legal name of the entity which owns the account."
          },
          "party_type" : {
            "type" : "string",
            "description" : "Either individual or business.",
            "nullable" : true,
            "enum" : [ "business", "individual" ]
          },
          "party_address" : {
            "$ref" : "#/components/schemas/address"
          },
          "name" : {
            "type" : "string",
            "description" : "A nickname for the account.",
            "nullable" : true
          },
          "account_details" : {
            "type" : "array",
            "description" : "An array of account detail objects.",
            "items" : {
              "$ref" : "#/components/schemas/account_detail"
            }
          },
          "routing_details" : {
            "type" : "array",
            "description" : "An array of routing detail objects.",
            "items" : {
              "$ref" : "#/components/schemas/routing_detail"
            }
          },
          "connection" : {
            "$ref" : "#/components/schemas/connection"
          },
          "currency" : {
            "$ref" : "#/components/schemas/currency"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "parent_account_id" : {
            "type" : "string",
            "description" : "The parent InternalAccount of this account.",
            "format" : "uuid",
            "nullable" : true
          },
          "counterparty_id" : {
            "type" : "string",
            "description" : "The Counterparty associated to this account.",
            "format" : "uuid",
            "nullable" : true
          },
          "ledger_account_id" : {
            "type" : "string",
            "description" : "If the internal account links to a ledger account in Modern Treasury, the id of the ledger account will be populated here.",
            "format" : "uuid",
            "nullable" : true
          }
        },
        "additionalProperties" : false
      },
      "internal_account_create_request" : {
        "required" : [ "connection_id", "currency", "name", "party_name" ],
        "type" : "object",
        "properties" : {
          "connection_id" : {
            "type" : "string",
            "description" : "The identifier of the financial institution the account belongs to."
          },
          "name" : {
            "type" : "string",
            "description" : "The nickname of the account."
          },
          "party_name" : {
            "type" : "string",
            "description" : "The legal name of the entity which owns the account."
          },
          "party_address" : {
            "$ref" : "#/components/schemas/internal_account_create_request_party_address"
          },
          "currency" : {
            "type" : "string",
            "description" : "Either \"USD\" or \"CAD\". Internal accounts created at Increase only supports \"USD\".",
            "example" : "USD",
            "enum" : [ "USD", "CAD" ]
          },
          "vendor_attributes" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A hash of vendor specific attributes that will be used when creating the account at the vendor specified by the given connection.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "parent_account_id" : {
            "type" : "string",
            "description" : "The parent internal account of this new account."
          },
          "counterparty_id" : {
            "type" : "string",
            "description" : "The Counterparty associated to this account."
          }
        }
      },
      "internal_account_update_request" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The nickname for the internal account."
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data in the form of key-value pairs. Pairs can be removed by passing an empty string or `null` as the value."
          },
          "parent_account_id" : {
            "type" : "string",
            "description" : "The parent internal account for this account."
          },
          "counterparty_id" : {
            "type" : "string",
            "description" : "The Counterparty associated to this account."
          }
        }
      },
      "invoice" : {
        "minProperties" : 30,
        "required" : [ "contact_details", "counterparty_billing_address", "counterparty_id", "counterparty_shipping_address", "created_at", "currency", "description", "due_date", "hosted_url", "id", "invoicer_address", "live_mode", "notification_email_addresses", "notifications_enabled", "number", "object", "originating_account_id", "payment_effective_date", "payment_method", "payment_orders", "payment_type", "pdf_url", "receiving_account_id", "recipient_email", "recipient_name", "status", "total_amount", "transaction_line_item_ids", "updated_at", "virtual_account_id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "contact_details" : {
            "type" : "array",
            "description" : "The invoicer's contact details displayed at the top of the invoice.",
            "items" : {
              "$ref" : "#/components/schemas/contact_detail"
            }
          },
          "recipient_email" : {
            "type" : "string",
            "description" : "The email of the recipient of the invoice. Leaving this value as null will fallback to using the counterparty's name.",
            "nullable" : true
          },
          "recipient_name" : {
            "type" : "string",
            "description" : "The name of the recipient of the invoice. Leaving this value as null will fallback to using the counterparty's name.",
            "nullable" : true
          },
          "counterparty_id" : {
            "type" : "string",
            "description" : "The ID of the counterparty receiving the invoice."
          },
          "counterparty_billing_address" : {
            "$ref" : "#/components/schemas/invoice_counterparty_billing_address"
          },
          "counterparty_shipping_address" : {
            "$ref" : "#/components/schemas/invoice_counterparty_shipping_address"
          },
          "currency" : {
            "$ref" : "#/components/schemas/currency"
          },
          "description" : {
            "type" : "string",
            "description" : "A free-form description of the invoice."
          },
          "due_date" : {
            "type" : "string",
            "description" : "A future date by when the invoice needs to be paid.",
            "format" : "date-time"
          },
          "invoicer_address" : {
            "$ref" : "#/components/schemas/invoice_invoicer_address"
          },
          "originating_account_id" : {
            "type" : "string",
            "description" : "The ID of the internal account the invoice should be paid to."
          },
          "receiving_account_id" : {
            "type" : "string",
            "description" : "The receiving account ID. Can be an `internal_account`.",
            "format" : "uuid",
            "nullable" : true
          },
          "virtual_account_id" : {
            "type" : "string",
            "description" : "The ID of the virtual account the invoice should be paid to.",
            "nullable" : true
          },
          "payment_effective_date" : {
            "type" : "string",
            "description" : "Date transactions are to be posted to the participants' account. Defaults to the current business day or the next business day if the current day is a bank holiday or weekend. Format: yyyy-mm-dd.",
            "format" : "date",
            "nullable" : true
          },
          "payment_type" : {
            "type" : "string",
            "description" : "One of `ach` or `eft`.",
            "nullable" : true,
            "enum" : [ "eft", "ach" ]
          },
          "payment_method" : {
            "type" : "string",
            "description" : "When opening an invoice, whether to show the embedded payment UI , automatically debit the recipient, or rely on manual payment from the recipient.",
            "nullable" : true,
            "enum" : [ "ui", "manual", "automatic" ]
          },
          "notifications_enabled" : {
            "type" : "boolean",
            "description" : "If true, the invoice will send email notifications to the invoice recipients about invoice status changes."
          },
          "notification_email_addresses" : {
            "type" : "array",
            "description" : "Emails in addition to the counterparty email to send invoice status notifications to. At least one email is required if notifications are enabled and the counterparty doesn't have an email.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "hosted_url" : {
            "type" : "string",
            "description" : "The URL of the hosted web UI where the invoice can be viewed."
          },
          "number" : {
            "type" : "string",
            "description" : "A unique record number assigned to each invoice that is issued."
          },
          "payment_orders" : {
            "type" : "array",
            "description" : "The payment orders created for paying the invoice through the invoice payment UI.",
            "items" : {
              "$ref" : "#/components/schemas/payment_order"
            }
          },
          "pdf_url" : {
            "type" : "string",
            "description" : "The URL where the invoice PDF can be downloaded.",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the invoice.",
            "enum" : [ "draft", "paid", "payment_pending", "unpaid", "voided" ]
          },
          "total_amount" : {
            "type" : "integer",
            "description" : "Total amount due in specified currency's smallest unit, e.g., $10 USD would be represented as 1000."
          },
          "transaction_line_item_ids" : {
            "type" : "array",
            "description" : "IDs of transaction line items associated with an invoice.",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        },
        "additionalProperties" : false
      },
      "invoice_create_request" : {
        "required" : [ "counterparty_id", "due_date", "originating_account_id" ],
        "type" : "object",
        "properties" : {
          "contact_details" : {
            "type" : "array",
            "description" : "The invoicer's contact details displayed at the top of the invoice.",
            "items" : {
              "$ref" : "#/components/schemas/contact_detail"
            }
          },
          "recipient_email" : {
            "type" : "string",
            "description" : "The email of the recipient of the invoice. Leaving this value as null will fallback to using the counterparty's name.",
            "nullable" : true
          },
          "recipient_name" : {
            "type" : "string",
            "description" : "The name of the recipient of the invoice. Leaving this value as null will fallback to using the counterparty's name.",
            "nullable" : true
          },
          "counterparty_id" : {
            "type" : "string",
            "description" : "The ID of the counterparty receiving the invoice."
          },
          "counterparty_billing_address" : {
            "$ref" : "#/components/schemas/invoice_counterparty_billing_address"
          },
          "counterparty_shipping_address" : {
            "$ref" : "#/components/schemas/invoice_counterparty_shipping_address"
          },
          "currency" : {
            "$ref" : "#/components/schemas/currency"
          },
          "description" : {
            "type" : "string",
            "description" : "A free-form description of the invoice."
          },
          "due_date" : {
            "type" : "string",
            "description" : "A future date by when the invoice needs to be paid.",
            "format" : "date-time"
          },
          "invoicer_address" : {
            "$ref" : "#/components/schemas/invoice_invoicer_address"
          },
          "originating_account_id" : {
            "type" : "string",
            "description" : "The ID of the internal account the invoice should be paid to."
          },
          "receiving_account_id" : {
            "type" : "string",
            "description" : "The receiving account ID. Can be an `external_account`.",
            "format" : "uuid"
          },
          "virtual_account_id" : {
            "type" : "string",
            "description" : "The ID of the virtual account the invoice should be paid to.",
            "nullable" : true
          },
          "payment_effective_date" : {
            "type" : "string",
            "description" : "Date transactions are to be posted to the participants' account. Defaults to the current business day or the next business day if the current day is a bank holiday or weekend. Format: yyyy-mm-dd.",
            "format" : "date"
          },
          "payment_type" : {
            "type" : "string",
            "description" : "One of `ach`, `bankgirot`, `eft`, `wire`, `check`, `sen`, `book`, `rtp`, `sepa`, `bacs`, `au_becs`, `interac`, `neft`, `nics`, `sic`, `signet`, `provexchange`, `zengin`.",
            "enum" : [ "ach", "au_becs", "se_bankgirot", "bacs", "book", "card", "check", "eft", "cross_border", "interac", "masav", "neft", "nics", "provxchange", "rtp", "sen", "sic", "sepa", "signet", "wire", "zengin" ]
          },
          "payment_method" : {
            "type" : "string",
            "description" : "The method by which the invoice can be paid. `ui` will show the embedded payment collection flow. `automatic` will automatically initiate payment based upon the account details of the receiving_account id.\\nIf the invoice amount is positive, the automatically initiated payment order's direction will be debit. If the invoice amount is negative, the automatically initiated payment order's direction will be credit. One of `manual`, `ui`, or `automatic`.",
            "enum" : [ "ui", "manual", "automatic" ]
          },
          "notifications_enabled" : {
            "type" : "boolean",
            "description" : "If true, the invoice will send email notifications to the invoice recipients about invoice status changes."
          },
          "notification_email_addresses" : {
            "type" : "array",
            "description" : "Emails in addition to the counterparty email to send invoice status notifications to. At least one email is required if notifications are enabled and the counterparty doesn't have an email.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "invoice_update_request" : {
        "type" : "object",
        "properties" : {
          "contact_details" : {
            "type" : "array",
            "description" : "The invoicer's contact details displayed at the top of the invoice.",
            "items" : {
              "$ref" : "#/components/schemas/contact_detail"
            }
          },
          "recipient_email" : {
            "type" : "string",
            "description" : "The email of the recipient of the invoice. Leaving this value as null will fallback to using the counterparty's name.",
            "nullable" : true
          },
          "recipient_name" : {
            "type" : "string",
            "description" : "The name of the recipient of the invoice. Leaving this value as null will fallback to using the counterparty's name.",
            "nullable" : true
          },
          "counterparty_id" : {
            "type" : "string",
            "description" : "The ID of the counterparty receiving the invoice."
          },
          "counterparty_billing_address" : {
            "$ref" : "#/components/schemas/invoice_counterparty_billing_address"
          },
          "counterparty_shipping_address" : {
            "$ref" : "#/components/schemas/invoice_counterparty_shipping_address"
          },
          "currency" : {
            "$ref" : "#/components/schemas/currency"
          },
          "description" : {
            "type" : "string",
            "description" : "A free-form description of the invoice."
          },
          "due_date" : {
            "type" : "string",
            "description" : "A future date by when the invoice needs to be paid.",
            "format" : "date-time"
          },
          "invoicer_address" : {
            "$ref" : "#/components/schemas/invoice_invoicer_address"
          },
          "originating_account_id" : {
            "type" : "string",
            "description" : "The ID of the internal account the invoice should be paid to."
          },
          "receiving_account_id" : {
            "type" : "string",
            "description" : "The receiving account ID. Can be an `external_account`.",
            "format" : "uuid"
          },
          "virtual_account_id" : {
            "type" : "string",
            "description" : "The ID of the virtual account the invoice should be paid to.",
            "nullable" : true
          },
          "payment_effective_date" : {
            "type" : "string",
            "description" : "Date transactions are to be posted to the participants' account. Defaults to the current business day or the next business day if the current day is a bank holiday or weekend. Format: yyyy-mm-dd.",
            "format" : "date"
          },
          "payment_type" : {
            "type" : "string",
            "description" : "One of `ach`, `bankgirot`, `eft`, `wire`, `check`, `sen`, `book`, `rtp`, `sepa`, `bacs`, `au_becs`, `interac`, `neft`, `nics`, `sic`, `signet`, `provexchange`, `zengin`.",
            "enum" : [ "ach", "au_becs", "se_bankgirot", "bacs", "book", "card", "check", "eft", "cross_border", "interac", "masav", "neft", "nics", "provxchange", "rtp", "sen", "sic", "sepa", "signet", "wire", "zengin" ]
          },
          "payment_method" : {
            "type" : "string",
            "description" : "The method by which the invoice can be paid. `ui` will show the embedded payment collection flow. `automatic` will automatically initiate payment based upon the account details of the receiving_account id.\\nIf the invoice amount is positive, the automatically initiated payment order's direction will be debit. If the invoice amount is negative, the automatically initiated payment order's direction will be credit. One of `manual`, `ui`, or `automatic`.",
            "enum" : [ "ui", "manual", "automatic" ]
          },
          "notifications_enabled" : {
            "type" : "boolean",
            "description" : "If true, the invoice will send email notifications to the invoice recipients about invoice status changes."
          },
          "notification_email_addresses" : {
            "type" : "array",
            "description" : "Emails in addition to the counterparty email to send invoice status notifications to. At least one email is required if notifications are enabled and the counterparty doesn't have an email.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "status" : {
            "type" : "string",
            "description" : "Invoice status must be updated in a `PATCH` request that does not modify any other invoice attributes.             Valid state transitions are `draft` to `unpaid`, `draft` or `unpaid` to `voided`, and `draft` or `unpaid`             to `paid`."
          }
        }
      },
      "invoice_line_item" : {
        "minProperties" : 11,
        "required" : [ "amount", "created_at", "description", "direction", "id", "live_mode", "name", "object", "quantity", "unit_amount", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the line item, typically a product or SKU name."
          },
          "description" : {
            "type" : "string",
            "description" : "An optional free-form description of the line item."
          },
          "quantity" : {
            "type" : "integer",
            "description" : "The number of units of a product or service that this line item is for.           Must be a whole number. Defaults to 1 if not provided."
          },
          "unit_amount" : {
            "type" : "integer",
            "description" : "The cost per unit of the product or service that this line item is for,           specified in the invoice currency's smallest unit."
          },
          "direction" : {
            "type" : "string",
            "description" : "Either `debit` or `credit`. `debit` indicates that a client owes the business money           and increases the invoice's `total_amount` due. `credit` has the opposite intention and effect."
          },
          "amount" : {
            "type" : "integer",
            "description" : "The total amount for this line item specified in the invoice currency's smallest unit."
          }
        },
        "additionalProperties" : false
      },
      "invoice_line_item_create_request" : {
        "required" : [ "name", "unit_amount" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the line item, typically a product or SKU name."
          },
          "description" : {
            "type" : "string",
            "description" : "An optional free-form description of the line item."
          },
          "quantity" : {
            "type" : "integer",
            "description" : "The number of units of a product or service that this line item is for.           Must be a whole number. Defaults to 1 if not provided."
          },
          "unit_amount" : {
            "type" : "integer",
            "description" : "The cost per unit of the product or service that this line item is for,           specified in the invoice currency's smallest unit."
          },
          "direction" : {
            "type" : "string",
            "description" : "Either `debit` or `credit`. `debit` indicates that a client owes the business money           and increases the invoice's `total_amount` due. `credit` has the opposite intention and effect."
          }
        }
      },
      "invoice_line_item_update_request" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the line item, typically a product or SKU name."
          },
          "description" : {
            "type" : "string",
            "description" : "An optional free-form description of the line item."
          },
          "quantity" : {
            "type" : "integer",
            "description" : "The number of units of a product or service that this line item is for.           Must be a whole number. Defaults to 1 if not provided."
          },
          "unit_amount" : {
            "type" : "integer",
            "description" : "The cost per unit of the product or service that this line item is for,           specified in the invoice currency's smallest unit."
          },
          "direction" : {
            "type" : "string",
            "description" : "Either `debit` or `credit`. `debit` indicates that a client owes the business money           and increases the invoice's `total_amount` due. `credit` has the opposite intention and effect."
          }
        }
      },
      "ledger" : {
        "maxProperties" : 11,
        "minProperties" : 9,
        "required" : [ "created_at", "description", "discarded_at", "id", "live_mode", "metadata", "name", "object", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "discarded_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the ledger."
          },
          "description" : {
            "type" : "string",
            "description" : "An optional free-form description for internal use.",
            "nullable" : true
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          }
        },
        "additionalProperties" : true
      },
      "ledger_create_request" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the ledger."
          },
          "description" : {
            "type" : "string",
            "description" : "An optional free-form description for internal use.",
            "nullable" : true
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          }
        }
      },
      "ledger_update_request" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the ledger."
          },
          "description" : {
            "type" : "string",
            "description" : "An optional free-form description for internal use.",
            "nullable" : true
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          }
        }
      },
      "ledger_account" : {
        "minProperties" : 15,
        "required" : [ "balances", "created_at", "description", "discarded_at", "id", "ledger_id", "ledgerable_id", "ledgerable_type", "live_mode", "lock_version", "metadata", "name", "normal_balance", "object", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "discarded_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the ledger account."
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the ledger account.",
            "nullable" : true
          },
          "normal_balance" : {
            "type" : "string",
            "description" : "The normal balance of the ledger account.",
            "enum" : [ "credit", "debit" ]
          },
          "balances" : {
            "$ref" : "#/components/schemas/ledger_balances_with_effective_at"
          },
          "lock_version" : {
            "type" : "integer",
            "description" : "Lock version of the ledger account."
          },
          "ledger_id" : {
            "type" : "string",
            "description" : "The id of the ledger that this account belongs to.",
            "format" : "uuid"
          },
          "ledgerable_id" : {
            "type" : "string",
            "description" : "If the ledger account links to another object in Modern Treasury, the id will be populated here, otherwise null.",
            "format" : "uuid",
            "nullable" : true
          },
          "ledgerable_type" : {
            "type" : "string",
            "description" : "If the ledger account links to another object in Modern Treasury, the type will be populated here, otherwise null. The value is one of internal_account or external_account.",
            "nullable" : true,
            "enum" : [ "external_account", "internal_account" ]
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          }
        },
        "additionalProperties" : false
      },
      "ledger_account_create_request" : {
        "required" : [ "currency", "ledger_id", "name", "normal_balance" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the ledger account."
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the ledger account.",
            "nullable" : true
          },
          "normal_balance" : {
            "type" : "string",
            "description" : "The normal balance of the ledger account.",
            "enum" : [ "credit", "debit" ]
          },
          "ledger_id" : {
            "type" : "string",
            "description" : "The id of the ledger that this account belongs to.",
            "format" : "uuid"
          },
          "currency" : {
            "type" : "string",
            "description" : "The currency of the ledger account."
          },
          "currency_exponent" : {
            "type" : "integer",
            "description" : "The currency exponent of the ledger account.",
            "nullable" : true
          },
          "ledgerable_id" : {
            "type" : "string",
            "description" : "If the ledger account links to another object in Modern Treasury, the id will be populated here, otherwise null.",
            "format" : "uuid"
          },
          "ledgerable_type" : {
            "type" : "string",
            "description" : "If the ledger account links to another object in Modern Treasury, the type will be populated here, otherwise null. The value is one of internal_account or external_account.",
            "enum" : [ "external_account", "internal_account" ]
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          }
        }
      },
      "ledger_account_update_request" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the ledger account."
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the ledger account.",
            "nullable" : true
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          }
        }
      },
      "ledger_account_balance_monitor" : {
        "minProperties" : 11,
        "required" : [ "alert_condition", "created_at", "current_ledger_account_balance_state", "description", "discarded_at", "id", "ledger_account_id", "live_mode", "metadata", "object", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "discarded_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "ledger_account_id" : {
            "type" : "string",
            "description" : "The ledger account associated with this balance monitor."
          },
          "description" : {
            "type" : "string",
            "description" : "An optional, free-form description for internal use.",
            "nullable" : true
          },
          "alert_condition" : {
            "$ref" : "#/components/schemas/alert_condition"
          },
          "current_ledger_account_balance_state" : {
            "$ref" : "#/components/schemas/current_ledger_account_balance_state"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          }
        },
        "additionalProperties" : false
      },
      "ledger_account_balance_monitor_create_request" : {
        "required" : [ "alert_condition", "ledger_account_id" ],
        "type" : "object",
        "properties" : {
          "ledger_account_id" : {
            "type" : "string",
            "description" : "The ledger account associated with this balance monitor."
          },
          "description" : {
            "type" : "string",
            "description" : "An optional, free-form description for internal use."
          },
          "alert_condition" : {
            "$ref" : "#/components/schemas/alert_condition_create_request"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          }
        }
      },
      "ledger_account_balance_monitor_update_request" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "An optional, free-form description for internal use."
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          }
        }
      },
      "alert_condition" : {
        "minProperties" : 3,
        "required" : [ "field", "operator", "value" ],
        "type" : "object",
        "properties" : {
          "field" : {
            "type" : "string",
            "description" : "One of `available_balance_amount`, `pending_balance_amount`, `posted_balance_amount`, `ledger_account_lock_version`."
          },
          "operator" : {
            "type" : "string",
            "description" : "A logical operator to compare the `field` against the `value`. One of `less_than`, `less_than_or_equals`, `equals`, `greater_than_or_equals`, `greater_than`."
          },
          "value" : {
            "type" : "integer",
            "description" : "The monitor's `current_ledger_account_balance_state.triggered` will be `true` when comparing the `field` to this integer value using the `operator` is logically true."
          }
        },
        "additionalProperties" : false
      },
      "alert_condition_create_request" : {
        "required" : [ "field", "operator", "value" ],
        "type" : "object",
        "properties" : {
          "field" : {
            "type" : "string",
            "description" : "One of `available_balance_amount`, `pending_balance_amount`, `posted_balance_amount`, `ledger_account_lock_version`."
          },
          "operator" : {
            "type" : "string",
            "description" : "A logical operator to compare the `field` against the `value`. One of `less_than`, `less_than_or_equals`, `equals`, `greater_than_or_equals`, `greater_than`."
          },
          "value" : {
            "type" : "integer",
            "description" : "The monitor's `current_ledger_account_balance_state.triggered` will be `true` when comparing the `field` to this integer value using the `operator` is logically true."
          }
        }
      },
      "current_ledger_account_balance_state" : {
        "minProperties" : 3,
        "required" : [ "balances", "ledger_account_lock_version", "triggered" ],
        "type" : "object",
        "properties" : {
          "balances" : {
            "$ref" : "#/components/schemas/ledger_balances"
          },
          "ledger_account_lock_version" : {
            "type" : "integer",
            "description" : "The current lock version of the ledger account."
          },
          "triggered" : {
            "type" : "boolean",
            "description" : "If `true`, the ledger account's balances satisfy the `alert_condition` at this lock version."
          }
        },
        "additionalProperties" : false
      },
      "ledger_account_category" : {
        "minProperties" : 12,
        "required" : [ "balances", "created_at", "description", "discarded_at", "id", "ledger_id", "live_mode", "metadata", "name", "normal_balance", "object", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "discarded_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the ledger account category."
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the ledger account category.",
            "nullable" : true
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "ledger_id" : {
            "type" : "string",
            "description" : "The id of the ledger that this account category belongs to.",
            "format" : "uuid"
          },
          "normal_balance" : {
            "type" : "string",
            "description" : "The normal balance of the ledger account category.",
            "enum" : [ "credit", "debit" ]
          },
          "balances" : {
            "$ref" : "#/components/schemas/ledger_balances"
          }
        },
        "additionalProperties" : false
      },
      "ledger_account_category_create_request" : {
        "required" : [ "currency", "ledger_id", "name", "normal_balance" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the ledger account category."
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the ledger account category.",
            "nullable" : true
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "currency" : {
            "type" : "string",
            "description" : "The currency of the ledger account category."
          },
          "currency_exponent" : {
            "type" : "integer",
            "description" : "The currency exponent of the ledger account category.",
            "nullable" : true
          },
          "ledger_id" : {
            "type" : "string",
            "description" : "The id of the ledger that this account category belongs to.",
            "format" : "uuid"
          },
          "normal_balance" : {
            "type" : "string",
            "description" : "The normal balance of the ledger account category.",
            "enum" : [ "credit", "debit" ]
          }
        }
      },
      "ledger_account_category_update_request" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the ledger account category."
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the ledger account category.",
            "nullable" : true
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          }
        }
      },
      "ledger_account_payout" : {
        "minProperties" : 16,
        "required" : [ "amount", "created_at", "currency", "currency_exponent", "description", "effective_at_upper_bound", "funding_ledger_account_id", "id", "ledger_id", "ledger_transaction_id", "live_mode", "metadata", "object", "payout_ledger_account_id", "status", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "ledger_id" : {
            "type" : "string",
            "description" : "The id of the ledger that this ledger account payout belongs to.",
            "format" : "uuid"
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the ledger account payout.",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the ledger account payout. One of `processing`, `pending`, `posted`, `archiving` or `archived`.",
            "enum" : [ "archived", "archiving", "pending", "posted", "processing" ]
          },
          "payout_ledger_account_id" : {
            "type" : "string",
            "description" : "The id of the payout ledger account whose ledger entries are queried against, and its balance is reduced as a result.",
            "format" : "uuid"
          },
          "funding_ledger_account_id" : {
            "type" : "string",
            "description" : "The id of the funding ledger account that sends to or receives funds from the payout ledger account.",
            "format" : "uuid"
          },
          "effective_at_upper_bound" : {
            "type" : "string",
            "description" : "The exclusive upper bound of the effective_at timestamp of the ledger entries to be included in the ledger account payout. The default value is the created_at timestamp of the ledger account payout.",
            "format" : "time"
          },
          "ledger_transaction_id" : {
            "type" : "string",
            "description" : "The id of the ledger transaction that this payout is associated with.",
            "format" : "uuid",
            "nullable" : true
          },
          "amount" : {
            "type" : "integer",
            "description" : "The amount of the ledger account payout.",
            "nullable" : true
          },
          "currency" : {
            "type" : "string",
            "description" : "The currency of the ledger account payout."
          },
          "currency_exponent" : {
            "type" : "integer",
            "description" : "The currency exponent of the ledger account payout.",
            "nullable" : true
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          }
        },
        "additionalProperties" : false
      },
      "ledger_account_payout_create_request" : {
        "required" : [ "funding_ledger_account_id", "payout_ledger_account_id" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The description of the ledger account payout.",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the ledger account payout. It is set to `pending` by default. To post a ledger account payout at creation, use `posted`.",
            "nullable" : true,
            "enum" : [ "pending", "posted" ]
          },
          "payout_ledger_account_id" : {
            "type" : "string",
            "description" : "The id of the payout ledger account whose ledger entries are queried against, and its balance is reduced as a result.",
            "format" : "uuid"
          },
          "funding_ledger_account_id" : {
            "type" : "string",
            "description" : "The id of the funding ledger account that sends to or receives funds from the payout ledger account.",
            "format" : "uuid"
          },
          "effective_at_upper_bound" : {
            "type" : "string",
            "description" : "The exclusive upper bound of the effective_at timestamp of the ledger entries to be included in the ledger account payout. The default value is the created_at timestamp of the ledger account payout.",
            "format" : "time",
            "nullable" : true
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "skip_payout_ledger_transaction" : {
            "type" : "boolean",
            "description" : "It is set to `false` by default. It should be set to `true` when migrating existing payouts.",
            "nullable" : true
          }
        }
      },
      "ledger_account_payout_update_request" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The description of the ledger account payout.",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "description" : "To post a pending ledger account payout, use `posted`. To archive a pending ledger transaction, use `archived`.",
            "enum" : [ "posted", "archived" ]
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          }
        }
      },
      "ledger_account_statement" : {
        "minProperties" : 15,
        "required" : [ "created_at", "description", "effective_at_lower_bound", "effective_at_upper_bound", "ending_balance", "id", "ledger_account_id", "ledger_account_lock_version", "ledger_account_normal_balance", "ledger_id", "live_mode", "metadata", "object", "starting_balance", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "ledger_id" : {
            "type" : "string",
            "description" : "The id of the ledger that this ledger account statement belongs to.",
            "format" : "uuid"
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the ledger account statement.",
            "nullable" : true
          },
          "ledger_account_id" : {
            "type" : "string",
            "description" : "The id of the ledger account whose ledger entries are queried against, and its balances are computed as a result.",
            "format" : "uuid"
          },
          "ledger_account_lock_version" : {
            "type" : "integer",
            "description" : "Lock version of the ledger account at the time of statement generation."
          },
          "ledger_account_normal_balance" : {
            "type" : "string",
            "description" : "The normal balance of the ledger account.",
            "enum" : [ "credit", "debit" ]
          },
          "effective_at_lower_bound" : {
            "type" : "string",
            "description" : "The inclusive lower bound of the effective_at timestamp of the ledger entries to be included in the ledger account statement.",
            "format" : "time"
          },
          "effective_at_upper_bound" : {
            "type" : "string",
            "description" : "The exclusive upper bound of the effective_at timestamp of the ledger entries to be included in the ledger account statement.",
            "format" : "time"
          },
          "starting_balance" : {
            "$ref" : "#/components/schemas/ledger_balances"
          },
          "ending_balance" : {
            "$ref" : "#/components/schemas/ledger_balances"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          }
        },
        "additionalProperties" : false
      },
      "ledger_account_statement_create_request" : {
        "required" : [ "effective_at_lower_bound", "effective_at_upper_bound", "ledger_account_id" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The description of the ledger account statement.",
            "nullable" : true
          },
          "ledger_account_id" : {
            "type" : "string",
            "description" : "The id of the ledger account whose ledger entries are queried against, and its balances are computed as a result.",
            "format" : "uuid"
          },
          "effective_at_lower_bound" : {
            "type" : "string",
            "description" : "The inclusive lower bound of the effective_at timestamp of the ledger entries to be included in the ledger account statement.",
            "format" : "time"
          },
          "effective_at_upper_bound" : {
            "type" : "string",
            "description" : "The exclusive upper bound of the effective_at timestamp of the ledger entries to be included in the ledger account statement.",
            "format" : "time"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          }
        }
      },
      "ledger_balance" : {
        "minProperties" : 5,
        "required" : [ "amount", "credits", "currency", "currency_exponent", "debits" ],
        "type" : "object",
        "properties" : {
          "credits" : {
            "type" : "integer"
          },
          "debits" : {
            "type" : "integer"
          },
          "amount" : {
            "type" : "integer"
          },
          "currency" : {
            "type" : "string",
            "description" : "The currency of the ledger account."
          },
          "currency_exponent" : {
            "type" : "integer",
            "description" : "The currency exponent of the ledger account."
          }
        },
        "additionalProperties" : false
      },
      "ledger_balances" : {
        "minProperties" : 3,
        "required" : [ "available_balance", "pending_balance", "posted_balance" ],
        "type" : "object",
        "properties" : {
          "pending_balance" : {
            "$ref" : "#/components/schemas/ledger_balance"
          },
          "posted_balance" : {
            "$ref" : "#/components/schemas/ledger_balance"
          },
          "available_balance" : {
            "$ref" : "#/components/schemas/ledger_balance"
          }
        },
        "additionalProperties" : false
      },
      "ledger_balances_with_effective_at" : {
        "minProperties" : 5,
        "required" : [ "available_balance", "effective_at_lower_bound", "effective_at_upper_bound", "pending_balance", "posted_balance" ],
        "type" : "object",
        "properties" : {
          "effective_at_lower_bound" : {
            "type" : "string",
            "description" : "The inclusive lower bound of the effective_at timestamp for the returned balances.",
            "format" : "time",
            "nullable" : true
          },
          "effective_at_upper_bound" : {
            "type" : "string",
            "description" : "The exclusive upper bound of the effective_at timestamp for the returned balances.",
            "format" : "time",
            "nullable" : true
          },
          "pending_balance" : {
            "$ref" : "#/components/schemas/ledger_balance"
          },
          "posted_balance" : {
            "$ref" : "#/components/schemas/ledger_balance"
          },
          "available_balance" : {
            "$ref" : "#/components/schemas/ledger_balance"
          }
        },
        "additionalProperties" : false
      },
      "ledger_entry" : {
        "minProperties" : 16,
        "required" : [ "amount", "created_at", "direction", "discarded_at", "id", "ledger_account_currency", "ledger_account_currency_exponent", "ledger_account_id", "ledger_account_lock_version", "ledger_transaction_id", "live_mode", "metadata", "object", "resulting_ledger_account_balances", "status", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "discarded_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "amount" : {
            "type" : "integer",
            "description" : "Value in specified currency's smallest unit. e.g. $10 would be represented as 1000. Can be any integer up to 36 digits."
          },
          "direction" : {
            "type" : "string",
            "description" : "One of `credit`, `debit`. Describes the direction money is flowing in the transaction. A `credit` moves money from your account to someone else's. A `debit` pulls money from someone else's account to your own. Note that wire, rtp, and check payments will always be `credit`.",
            "enum" : [ "credit", "debit" ]
          },
          "status" : {
            "type" : "string",
            "description" : "Equal to the state of the ledger transaction when the ledger entry was created. One of `pending`, `posted`, or `archived`.",
            "enum" : [ "archived", "pending", "posted" ]
          },
          "ledger_account_id" : {
            "type" : "string",
            "description" : "The ledger account that this ledger entry is associated with.",
            "format" : "uuid"
          },
          "ledger_account_lock_version" : {
            "type" : "integer",
            "description" : "Lock version of the ledger account. This can be passed when creating a ledger transaction to only succeed if no ledger transactions have posted since the given version. See our post about Designing the Ledgers API with Optimistic Locking for more details.",
            "nullable" : true
          },
          "ledger_account_currency" : {
            "type" : "string",
            "description" : "The currency of the ledger account."
          },
          "ledger_account_currency_exponent" : {
            "type" : "integer",
            "description" : "The currency exponent of the ledger account."
          },
          "ledger_transaction_id" : {
            "type" : "string",
            "description" : "The ledger transaction that this ledger entry is associated with."
          },
          "resulting_ledger_account_balances" : {
            "$ref" : "#/components/schemas/ledger_balances"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          }
        },
        "additionalProperties" : false
      },
      "ledger_entry_create_request" : {
        "required" : [ "amount", "direction", "ledger_account_id" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "integer",
            "description" : "Value in specified currency's smallest unit. e.g. $10 would be represented as 1000. Can be any integer up to 36 digits."
          },
          "direction" : {
            "type" : "string",
            "description" : "One of `credit`, `debit`. Describes the direction money is flowing in the transaction. A `credit` moves money from your account to someone else's. A `debit` pulls money from someone else's account to your own. Note that wire, rtp, and check payments will always be `credit`.",
            "enum" : [ "credit", "debit" ]
          },
          "ledger_account_id" : {
            "type" : "string",
            "description" : "The ledger account that this ledger entry is associated with.",
            "format" : "uuid"
          },
          "lock_version" : {
            "type" : "integer",
            "description" : "Lock version of the ledger account. This can be passed when creating a ledger transaction to only succeed if no ledger transactions have posted since the given version. See our post about Designing the Ledgers API with Optimistic Locking for more details.",
            "nullable" : true
          },
          "pending_balance_amount" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "integer"
            },
            "description" : "Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to lock on the account’s pending balance. If any of these conditions would be false after the transaction is created, the entire call will fail with error code 422.",
            "nullable" : true
          },
          "posted_balance_amount" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "integer"
            },
            "description" : "Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to lock on the account’s posted balance. If any of these conditions would be false after the transaction is created, the entire call will fail with error code 422.",
            "nullable" : true
          },
          "available_balance_amount" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "integer"
            },
            "description" : "Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to lock on the account’s available balance. If any of these conditions would be false after the transaction is created, the entire call will fail with error code 422.",
            "nullable" : true
          },
          "show_resulting_ledger_account_balances" : {
            "type" : "boolean",
            "description" : "If true, response will include the balance of the associated ledger account for the entry.",
            "nullable" : true
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          }
        }
      },
      "ledger_entry_of_transaction_version" : {
        "minProperties" : 14,
        "required" : [ "amount", "created_at", "direction", "id", "ledger_account_currency", "ledger_account_currency_exponent", "ledger_account_id", "ledger_account_lock_version", "ledger_transaction_id", "live_mode", "metadata", "object", "resulting_ledger_account_balances", "status" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amount" : {
            "type" : "integer",
            "description" : "Value in specified currency's smallest unit. e.g. $10 would be represented as 1000. Can be any integer up to 36 digits."
          },
          "direction" : {
            "type" : "string",
            "description" : "One of `credit`, `debit`. Describes the direction money is flowing in the transaction. A `credit` moves money from your account to someone else's. A `debit` pulls money from someone else's account to your own. Note that wire, rtp, and check payments will always be `credit`.",
            "enum" : [ "credit", "debit" ]
          },
          "status" : {
            "type" : "string",
            "description" : "Equal to the state of the ledger transaction when the ledger entry was created. One of `pending`, `posted`, or `archived`.",
            "enum" : [ "archived", "pending", "posted" ]
          },
          "ledger_account_id" : {
            "type" : "string",
            "description" : "The ledger account that this ledger entry is associated with.",
            "format" : "uuid"
          },
          "ledger_account_lock_version" : {
            "type" : "integer",
            "description" : "Lock version of the ledger account. This can be passed when creating a ledger transaction to only succeed if no ledger transactions have posted since the given version. See our post about Designing the Ledgers API with Optimistic Locking for more details.",
            "nullable" : true
          },
          "ledger_account_currency" : {
            "type" : "string",
            "description" : "The currency of the ledger account."
          },
          "ledger_account_currency_exponent" : {
            "type" : "integer",
            "description" : "The currency exponent of the ledger account."
          },
          "ledger_transaction_id" : {
            "type" : "string",
            "description" : "The ledger transaction that this ledger entry is associated with."
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "resulting_ledger_account_balances" : {
            "$ref" : "#/components/schemas/ledger_balances"
          }
        },
        "additionalProperties" : false
      },
      "ledger_event_handler" : {
        "minProperties" : 11,
        "required" : [ "conditions", "created_at", "description", "discarded_at", "id", "ledger_transaction_template", "live_mode", "metadata", "name", "object", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "discarded_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the ledger event handler."
          },
          "description" : {
            "type" : "string",
            "description" : "An optional description.",
            "nullable" : true
          },
          "ledger_transaction_template" : {
            "$ref" : "#/components/schemas/ledger_event_handler_ledger_transaction_template"
          },
          "conditions" : {
            "$ref" : "#/components/schemas/ledger_event_handler_conditions"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "nullable" : true,
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          }
        },
        "additionalProperties" : false
      },
      "ledger_event_handler_conditions" : {
        "minProperties" : 3,
        "required" : [ "field", "operator", "value" ],
        "type" : "object",
        "properties" : {
          "field" : {
            "type" : "string",
            "description" : "The field you're fetching from the `ledgerable_event`."
          },
          "operator" : {
            "type" : "string",
            "description" : "What the operator between the `field` and `value` is. Currently only supports `equals`."
          },
          "value" : {
            "type" : "string",
            "description" : "What raw string you are comparing the `field` against."
          }
        },
        "additionalProperties" : false
      },
      "ledger_event_handler_create_request" : {
        "required" : [ "ledger_transaction_template", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the ledger event handler."
          },
          "description" : {
            "type" : "string",
            "description" : "An optional description.",
            "nullable" : true
          },
          "ledger_id" : {
            "type" : "string",
            "description" : "The id of the ledger that this account belongs to.",
            "format" : "uuid"
          },
          "ledger_transaction_template" : {
            "$ref" : "#/components/schemas/ledger_event_handler_ledger_transaction_template"
          },
          "conditions" : {
            "$ref" : "#/components/schemas/ledger_event_handler_conditions"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "nullable" : true,
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          }
        }
      },
      "ledger_event_handler_ledger_entries" : {
        "minProperties" : 3,
        "required" : [ "amount", "direction", "ledger_account_id" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "string",
            "description" : "The field you're fetching from the `ledgerable_event`."
          },
          "direction" : {
            "type" : "string",
            "description" : "What the operator between the `field` and `value` is. Currently only supports `equals`."
          },
          "ledger_account_id" : {
            "type" : "string",
            "description" : "What raw string you are comparing the `field` against."
          }
        },
        "additionalProperties" : false
      },
      "ledger_event_handler_ledger_transaction_template" : {
        "minProperties" : 4,
        "required" : [ "description", "effective_at", "ledger_entries", "metadata" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "An optional description for internal use.",
            "nullable" : true
          },
          "effective_at" : {
            "type" : "string",
            "description" : "The timestamp (ISO8601 format) at which the ledger transaction happened for reporting purposes.",
            "format" : "datetime",
            "nullable" : true
          },
          "ledger_entries" : {
            "type" : "array",
            "description" : "An array of ledger entry objects.",
            "items" : {
              "$ref" : "#/components/schemas/ledger_event_handler_ledger_entries"
            }
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "nullable" : true,
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          }
        },
        "additionalProperties" : false
      },
      "ledger_transaction" : {
        "minProperties" : 17,
        "required" : [ "created_at", "description", "effective_at", "effective_date", "external_id", "id", "ledger_entries", "ledger_id", "ledgerable_id", "ledgerable_type", "live_mode", "metadata", "object", "posted_at", "reverses_ledger_transaction_id", "status", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "description" : {
            "type" : "string",
            "description" : "An optional description for internal use.",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "description" : "To post a ledger transaction at creation, use `posted`.",
            "enum" : [ "archived", "pending", "posted" ]
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "effective_at" : {
            "type" : "string",
            "description" : "The timestamp (ISO8601 format) at which the ledger transaction happened for reporting purposes.",
            "format" : "date"
          },
          "effective_date" : {
            "type" : "string",
            "description" : "The date (YYYY-MM-DD) on which the ledger transaction happened for reporting purposes.",
            "format" : "date"
          },
          "ledger_entries" : {
            "type" : "array",
            "description" : "An array of ledger entry objects.",
            "items" : {
              "$ref" : "#/components/schemas/ledger_entry"
            }
          },
          "posted_at" : {
            "type" : "string",
            "description" : "The time on which the ledger transaction posted. This is null if the ledger transaction is pending.",
            "format" : "time",
            "nullable" : true
          },
          "ledger_id" : {
            "type" : "string",
            "description" : "The ID of the ledger this ledger transaction belongs to.",
            "format" : "uuid"
          },
          "ledgerable_type" : {
            "type" : "string",
            "description" : "If the ledger transaction can be reconciled to another object in Modern Treasury, the type will be populated here, otherwise null. This can be one of payment_order, incoming_payment_detail, expected_payment, return, or reversal.",
            "nullable" : true,
            "enum" : [ "counterparty", "expected_payment", "incoming_payment_detail", "internal_account", "line_item", "paper_item", "payment_order", "payment_order_attempt", "return", "reversal" ]
          },
          "ledgerable_id" : {
            "type" : "string",
            "description" : "If the ledger transaction can be reconciled to another object in Modern Treasury, the id will be populated here, otherwise null.",
            "format" : "uuid",
            "nullable" : true
          },
          "external_id" : {
            "type" : "string",
            "description" : "A unique string to represent the ledger transaction. Only one pending or posted ledger transaction may have this ID in the ledger.",
            "nullable" : true
          },
          "reverses_ledger_transaction_id" : {
            "type" : "string",
            "description" : "The ID of the original ledger transaction that this ledger transaction reverses.",
            "nullable" : true
          }
        },
        "additionalProperties" : false
      },
      "ledger_transaction_version" : {
        "minProperties" : 17,
        "required" : [ "created_at", "description", "effective_at", "effective_date", "external_id", "id", "ledger_entries", "ledger_id", "ledger_transaction_id", "ledgerable_id", "ledgerable_type", "live_mode", "metadata", "object", "posted_at", "status", "version" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "ledger_transaction_id" : {
            "type" : "string",
            "description" : "The ID of the ledger transaction",
            "format" : "uuid"
          },
          "description" : {
            "type" : "string",
            "description" : "An optional description for internal use.",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "description" : "One of `pending`, `posted`, or `archived`",
            "enum" : [ "archived", "pending", "posted" ]
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "effective_at" : {
            "type" : "string",
            "description" : "The timestamp (ISO8601 format) at which the ledger transaction happened for reporting purposes.",
            "format" : "time"
          },
          "effective_date" : {
            "type" : "string",
            "description" : "The date (YYYY-MM-DD) on which the ledger transaction happened for reporting purposes.",
            "format" : "date"
          },
          "ledger_entries" : {
            "type" : "array",
            "description" : "An array of ledger entry objects.",
            "items" : {
              "$ref" : "#/components/schemas/ledger_entry_of_transaction_version"
            }
          },
          "posted_at" : {
            "type" : "string",
            "description" : "The time on which the ledger transaction posted. This is null if the ledger transaction is pending.",
            "format" : "time",
            "nullable" : true
          },
          "ledger_id" : {
            "type" : "string",
            "description" : "The ID of the ledger this ledger transaction belongs to.",
            "format" : "uuid"
          },
          "ledgerable_type" : {
            "type" : "string",
            "description" : "If the ledger transaction can be reconciled to another object in Modern Treasury, the type will be populated here, otherwise null. This can be one of payment_order, incoming_payment_detail, expected_payment, return, or reversal.",
            "nullable" : true,
            "enum" : [ "counterparty", "expected_payment", "incoming_payment_detail", "internal_account", "line_item", "paper_item", "payment_order", "payment_order_attempt", "return", "reversal" ]
          },
          "ledgerable_id" : {
            "type" : "string",
            "description" : "If the ledger transaction can be reconciled to another object in Modern Treasury, the id will be populated here, otherwise null.",
            "format" : "uuid",
            "nullable" : true
          },
          "external_id" : {
            "type" : "string",
            "description" : "A unique string to represent the ledger transaction. Only one pending or posted ledger transaction may have this ID in the ledger.",
            "nullable" : true
          },
          "version" : {
            "type" : "integer",
            "description" : "Version number of the ledger transaction."
          }
        },
        "additionalProperties" : false
      },
      "ledger_transaction_create_request" : {
        "required" : [ "ledger_entries" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "An optional description for internal use.",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "description" : "To post a ledger transaction at creation, use `posted`.",
            "enum" : [ "archived", "pending", "posted" ]
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "effective_at" : {
            "type" : "string",
            "description" : "The timestamp (ISO8601 format) at which the ledger transaction happened for reporting purposes.",
            "format" : "date"
          },
          "effective_date" : {
            "type" : "string",
            "description" : "The date (YYYY-MM-DD) on which the ledger transaction happened for reporting purposes.",
            "format" : "date"
          },
          "ledger_entries" : {
            "type" : "array",
            "description" : "An array of ledger entry objects.",
            "items" : {
              "$ref" : "#/components/schemas/ledger_entry_create_request"
            }
          },
          "external_id" : {
            "type" : "string",
            "description" : "A unique string to represent the ledger transaction. Only one pending or posted ledger transaction may have this ID in the ledger."
          },
          "ledgerable_type" : {
            "type" : "string",
            "description" : "If the ledger transaction can be reconciled to another object in Modern Treasury, the type will be populated here, otherwise null. This can be one of payment_order, incoming_payment_detail, expected_payment, return, or reversal.",
            "enum" : [ "counterparty", "expected_payment", "incoming_payment_detail", "internal_account", "line_item", "paper_item", "payment_order", "payment_order_attempt", "return", "reversal" ]
          },
          "ledgerable_id" : {
            "type" : "string",
            "description" : "If the ledger transaction can be reconciled to another object in Modern Treasury, the id will be populated here, otherwise null.",
            "format" : "uuid"
          }
        }
      },
      "ledger_transaction_update_request" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "An optional description for internal use.",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "description" : "To post a ledger transaction at creation, use `posted`.",
            "enum" : [ "archived", "pending", "posted" ]
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "effective_at" : {
            "type" : "string",
            "description" : "The timestamp (ISO8601 format) at which the ledger transaction happened for reporting purposes.",
            "format" : "date"
          },
          "ledger_entries" : {
            "type" : "array",
            "description" : "An array of ledger entry objects.",
            "items" : {
              "$ref" : "#/components/schemas/ledger_entry_create_request"
            }
          }
        }
      },
      "ledger_transaction_reversal_create_request" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "An optional free-form description for the reversal ledger transaction. Maximum of 1000 characters allowed."
          },
          "status" : {
            "type" : "string",
            "description" : "Status of the reversal ledger transaction. It defaults to `posted` if not provided.",
            "enum" : [ "archived", "pending", "posted" ]
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data to be added to the reversal ledger transaction as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "effective_at" : {
            "type" : "string",
            "description" : "The timestamp (ISO8601 format) at which the reversal ledger transaction happened for reporting purposes. It defaults to the `effective_at` of the original ledger transaction if not provided.",
            "format" : "date-time",
            "nullable" : true
          },
          "external_id" : {
            "type" : "string",
            "description" : "Must be unique within the ledger."
          },
          "ledgerable_type" : {
            "type" : "string",
            "description" : "Specify this if you'd like to link the reversal ledger transaction to a Payment object like Return or Reversal.",
            "enum" : [ "counterparty", "expected_payment", "incoming_payment_detail", "internal_account", "line_item", "paper_item", "payment_order", "payment_order_attempt", "return", "reversal" ]
          },
          "ledgerable_id" : {
            "type" : "string",
            "description" : "Specify this if you'd like to link the reversal ledger transaction to a Payment object like Return or Reversal.",
            "format" : "uuid"
          }
        }
      },
      "ledgerable_event" : {
        "minProperties" : 14,
        "required" : [ "amount", "created_at", "currency", "currency_exponent", "custom_data", "description", "direction", "id", "ledger_event_handler_id", "live_mode", "metadata", "name", "object", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the ledgerable event."
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the ledgerable event.",
            "nullable" : true
          },
          "direction" : {
            "type" : "string",
            "description" : "One of `credit`, `debit`.",
            "nullable" : true
          },
          "amount" : {
            "type" : "integer",
            "description" : "Value in specified currency's smallest unit. e.g. $10 would be represented as 1000."
          },
          "currency" : {
            "type" : "string",
            "description" : "An ISO 4217 conformed currency or a custom currency."
          },
          "currency_exponent" : {
            "type" : "integer",
            "description" : "Must be included if currency is a custom currency. The currency_exponent cannot exceed 30.",
            "nullable" : true
          },
          "custom_data" : {
            "type" : "object",
            "description" : "Additionally data to be used by the Ledger Event Handler.",
            "nullable" : true
          },
          "ledger_event_handler_id" : {
            "type" : "string",
            "description" : "Id of the ledger event handler that is used to create a ledger transaction.",
            "format" : "uuid"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "nullable" : true,
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          }
        },
        "additionalProperties" : false
      },
      "ledgerable_event_create_request" : {
        "required" : [ "amount", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the ledgerable event."
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the ledgerable event.",
            "nullable" : true
          },
          "direction" : {
            "type" : "string",
            "description" : "One of `credit`, `debit`.",
            "nullable" : true
          },
          "amount" : {
            "type" : "integer",
            "description" : "Value in specified currency's smallest unit. e.g. $10 would be represented as 1000."
          },
          "currency" : {
            "type" : "string",
            "description" : "An ISO 4217 conformed currency or a custom currency.",
            "nullable" : true
          },
          "currency_exponent" : {
            "type" : "integer",
            "description" : "Must be included if currency is a custom currency. The currency_exponent cannot exceed 30.",
            "nullable" : true
          },
          "custom_data" : {
            "type" : "object",
            "description" : "Additionally data to be used by the Ledger Event Handler.",
            "nullable" : true
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          }
        }
      },
      "line_item" : {
        "minProperties" : 13,
        "required" : [ "accounting", "accounting_category_id", "accounting_ledger_class_id", "amount", "created_at", "description", "id", "itemizable_id", "itemizable_type", "live_mode", "metadata", "object", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "itemizable_id" : {
            "type" : "string",
            "description" : "The ID of the payment order or expected payment.",
            "format" : "uuid"
          },
          "itemizable_type" : {
            "type" : "string",
            "description" : "One of `payment_orders` or `expected_payments`.",
            "enum" : [ "ExpectedPayment", "PaymentOrder" ]
          },
          "amount" : {
            "type" : "integer",
            "description" : "Value in specified currency's smallest unit. e.g. $10 would be represented as 1000."
          },
          "description" : {
            "type" : "string",
            "description" : "A free-form description of the line item.",
            "nullable" : true
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "accounting" : {
            "$ref" : "#/components/schemas/accounting"
          },
          "accounting_category_id" : {
            "type" : "string",
            "description" : "The ID of one of your accounting categories. Note that these will only be accessible if your accounting system has been connected.",
            "format" : "uuid",
            "nullable" : true
          },
          "accounting_ledger_class_id" : {
            "type" : "string",
            "description" : "The ID of one of the class objects in your accounting system. Class objects track segments of your business independent of client or project. Note that these will only be accessible if your accounting system has been connected.",
            "format" : "uuid",
            "nullable" : true
          }
        },
        "additionalProperties" : false
      },
      "line_item_request" : {
        "required" : [ "amount" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "integer",
            "description" : "Value in specified currency's smallest unit. e.g. $10 would be represented as 1000."
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "description" : {
            "type" : "string",
            "description" : "A free-form description of the line item.",
            "nullable" : true
          },
          "accounting_category_id" : {
            "type" : "string",
            "description" : "The ID of one of your accounting categories. Note that these will only be accessible if your accounting system has been connected.",
            "nullable" : true
          }
        }
      },
      "line_item_update_request" : {
        "type" : "object",
        "properties" : {
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          }
        }
      },
      "paper_item" : {
        "minProperties" : 18,
        "required" : [ "account_number", "account_number_safe", "amount", "check_number", "created_at", "currency", "deposit_date", "id", "live_mode", "lockbox_number", "memo_field", "object", "remitter_name", "routing_number", "status", "transaction_id", "transaction_line_item_id", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "transaction_line_item_id" : {
            "type" : "string",
            "description" : "The ID of the reconciled Transaction Line Item or `null`.",
            "format" : "uuid",
            "nullable" : true
          },
          "transaction_id" : {
            "type" : "string",
            "description" : "The ID of the reconciled Transaction or `null`.",
            "format" : "uuid",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "description" : "The current status of the paper item. One of `pending`, `completed`, or `returned`.",
            "enum" : [ "completed", "pending", "returned" ]
          },
          "lockbox_number" : {
            "type" : "string",
            "description" : "The identifier for the lockbox assigned by the bank."
          },
          "deposit_date" : {
            "type" : "string",
            "description" : "The date the paper item was deposited into your organization's bank account.",
            "format" : "date"
          },
          "amount" : {
            "type" : "integer",
            "description" : "The amount of the paper item."
          },
          "currency" : {
            "$ref" : "#/components/schemas/currency"
          },
          "account_number" : {
            "type" : "string",
            "description" : "The account number on the paper item.",
            "nullable" : true
          },
          "account_number_safe" : {
            "type" : "string",
            "description" : "The last 4 digits of the account_number.",
            "nullable" : true
          },
          "routing_number" : {
            "type" : "string",
            "description" : "The routing number on the paper item.",
            "nullable" : true
          },
          "check_number" : {
            "type" : "string",
            "description" : "The check number on the paper item.",
            "nullable" : true
          },
          "remitter_name" : {
            "type" : "string",
            "description" : "The name of the remitter on the paper item.",
            "nullable" : true
          },
          "memo_field" : {
            "type" : "string",
            "description" : "The memo field on the paper item.",
            "nullable" : true
          }
        },
        "additionalProperties" : false
      },
      "payment_flow" : {
        "maxProperties" : 17,
        "minProperties" : 15,
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "client_token" : {
            "type" : "string",
            "description" : "The client token of the payment flow. This token can be used to embed a payment workflow in your client-side application."
          },
          "status" : {
            "type" : "string",
            "description" : "The current status of the payment flow. One of `pending`, `completed`, `expired`, or `cancelled`.",
            "enum" : [ "cancelled", "completed", "expired", "pending" ]
          },
          "amount" : {
            "type" : "integer",
            "description" : "Value in specified currency's smallest unit. e.g. $10 would be represented as 1000. Can be any integer up to 36 digits."
          },
          "currency" : {
            "type" : "string",
            "description" : "The currency of the payment."
          },
          "direction" : {
            "type" : "string",
            "description" : "Describes the direction money is flowing in the transaction. Can only be `debit`. A `debit` pulls money from someone else's account to your own.",
            "enum" : [ "credit", "debit" ]
          },
          "counterparty_id" : {
            "type" : "string",
            "description" : "The ID of a counterparty associated with the payment. As part of the payment workflow an external account will be associated with this counterparty.",
            "format" : "uuid",
            "nullable" : true
          },
          "receiving_account_id" : {
            "type" : "string",
            "description" : "If present, the ID of the external account created using this flow.",
            "format" : "uuid",
            "nullable" : true
          },
          "originating_account_id" : {
            "type" : "string",
            "description" : "The ID of one of your organization's internal accounts.",
            "format" : "uuid",
            "nullable" : true
          },
          "payment_order_id" : {
            "type" : "string",
            "description" : "If present, the ID of the payment order created using this flow.",
            "format" : "uuid",
            "nullable" : true
          },
          "effective_date_selection_enabled" : {
            "type" : "boolean",
            "description" : "When `true`, your end-user can schedule the payment `effective_date` while completing the pre-built UI."
          },
          "due_date" : {
            "type" : "string",
            "description" : "The due date for the flow. Can only be passed in when `effective_date_selection_enabled` is `true`.",
            "format" : "date",
            "nullable" : true
          },
          "selected_effective_date" : {
            "type" : "string",
            "description" : "This field is set after your end-user selects a payment date while completing the pre-built UI. This field is always `null` unless `effective_date_selection_enabled` is `true`.",
            "format" : "date",
            "nullable" : true
          }
        },
        "additionalProperties" : false
      },
      "payment_flow_create_request" : {
        "required" : [ "amount", "counterparty_id", "currency", "direction", "originating_account_id" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "integer",
            "description" : "Required. Value in specified currency's smallest unit. e.g. $10 would be represented as 1000. Can be any integer up to 36 digits."
          },
          "currency" : {
            "type" : "string",
            "description" : "Required. The currency of the payment."
          },
          "direction" : {
            "type" : "string",
            "description" : "Required. Describes the direction money is flowing in the transaction. Can only be `debit`. A `debit` pulls money from someone else's account to your own.",
            "enum" : [ "credit", "debit" ]
          },
          "counterparty_id" : {
            "type" : "string",
            "description" : "Required. The ID of a counterparty associated with the payment. As part of the payment workflow an external account will be associated with this model.",
            "format" : "uuid"
          },
          "originating_account_id" : {
            "type" : "string",
            "description" : "Required. The ID of one of your organization's internal accounts.",
            "format" : "uuid"
          },
          "due_date" : {
            "type" : "string",
            "description" : "Optional. Can only be passed in when `effective_date_selection_enabled` is `true`. When set, the due date is shown to your end-user in the pre-built UI as they are selecting a payment `effective_date`.",
            "format" : "date"
          }
        }
      },
      "payment_flow_update_request" : {
        "required" : [ "status" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Required. The updated status of the payment flow. Can only be used to mark a flow as `cancelled`.",
            "enum" : [ "cancelled" ]
          }
        }
      },
      "payment_order" : {
        "minProperties" : 45,
        "required" : [ "accounting", "accounting_category_id", "accounting_ledger_class_id", "amount", "charge_bearer", "compliance_rule_metadata", "counterparty_id", "created_at", "currency", "current_return", "decision_id", "description", "direction", "effective_date", "expires_at", "foreign_exchange_contract", "foreign_exchange_indicator", "id", "ledger_transaction_id", "live_mode", "metadata", "nsf_protected", "object", "originating_account_id", "originating_party_name", "priority", "purpose", "receiving_account", "receiving_account_id", "receiving_account_type", "reference_numbers", "remittance_information", "send_remittance_advice", "statement_descriptor", "status", "subtype", "transaction_ids", "transaction_monitoring_enabled", "type", "ultimate_originating_party_identifier", "ultimate_originating_party_name", "ultimate_receiving_party_identifier", "ultimate_receiving_party_name", "updated_at", "vendor_failure_reason" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "type" : {
            "type" : "string",
            "description" : "One of `ach`, `bankgirot`, `eft`, `wire`, `check`, `sen`, `book`, `rtp`, `sepa`, `bacs`, `au_becs`, `interac`, `neft`, `nics`, `sic`, `signet`, `provexchange`, `zengin`.",
            "enum" : [ "ach", "au_becs", "bacs", "book", "card", "check", "cross_border", "eft", "interac", "masav", "neft", "nics", "provxchange", "rtp", "se_bankgirot", "sen", "sepa", "sic", "signet", "wire", "zengin" ]
          },
          "subtype" : {
            "type" : "string",
            "description" : "An additional layer of classification for the type of payment order you are doing. This field is only used for `ach` payment orders currently. For `ach`  payment orders, the `subtype`  represents the SEC code. We currently support `CCD`, `PPD`, `IAT`, `CTX`, `WEB`, `CIE`, and `TEL`.",
            "nullable" : true,
            "enum" : [ "0C", "0N", "0S", "CCD", "CIE", "CTX", "IAT", "PPD", "TEL", "WEB" ]
          },
          "amount" : {
            "type" : "integer",
            "description" : "Value in specified currency's smallest unit. e.g. $10 would be represented as 1000 (cents). For RTP, the maximum amount allowed by the network is $100,000."
          },
          "direction" : {
            "type" : "string",
            "description" : "One of `credit`, `debit`. Describes the direction money is flowing in the transaction. A `credit` moves money from your account to someone else's. A `debit` pulls money from someone else's account to your own. Note that wire, rtp, and check payments will always be `credit`.",
            "enum" : [ "credit", "debit" ]
          },
          "priority" : {
            "type" : "string",
            "description" : "Either `normal` or `high`. For ACH and EFT payments, `high` represents a same-day ACH or EFT transfer, respectively. For check payments, `high` can mean an overnight check rather than standard mail.",
            "enum" : [ "high", "normal" ]
          },
          "originating_account_id" : {
            "type" : "string",
            "description" : "The ID of one of your organization's internal accounts.",
            "format" : "uuid"
          },
          "receiving_account_id" : {
            "type" : "string",
            "description" : "The receiving account ID. Can be an `external_account` or `internal_account`.",
            "format" : "uuid"
          },
          "accounting" : {
            "$ref" : "#/components/schemas/accounting"
          },
          "accounting_category_id" : {
            "type" : "string",
            "description" : "The ID of one of your accounting categories. Note that these will only be accessible if your accounting system has been connected.",
            "format" : "uuid",
            "nullable" : true,
            "deprecated" : true
          },
          "accounting_ledger_class_id" : {
            "type" : "string",
            "description" : "The ID of one of your accounting ledger classes. Note that these will only be accessible if your accounting system has been connected.",
            "format" : "uuid",
            "nullable" : true,
            "deprecated" : true
          },
          "currency" : {
            "$ref" : "#/components/schemas/currency"
          },
          "effective_date" : {
            "type" : "string",
            "description" : "Date transactions are to be posted to the participants' account. Defaults to the current business day or the next business day if the current day is a bank holiday or weekend. Format: yyyy-mm-dd.",
            "format" : "date"
          },
          "description" : {
            "type" : "string",
            "description" : "An optional description for internal use.",
            "nullable" : true
          },
          "statement_descriptor" : {
            "type" : "string",
            "description" : "An optional descriptor which will appear in the receiver's statement. For `check` payments this field will be used as the memo line. For `ach` the maximum length is 10 characters. Note that for ACH payments, the name on your bank account will be included automatically by the bank, so you can use the characters for other useful information. For `eft` the maximum length is 15 characters.",
            "nullable" : true
          },
          "remittance_information" : {
            "type" : "string",
            "description" : "For `ach`, this field will be passed through on an addenda record. For `wire` payments the field will be passed through as the \"Originator to Beneficiary Information\", also known as OBI or Fedwire tag 6000.",
            "nullable" : true
          },
          "purpose" : {
            "type" : "string",
            "description" : "For `wire`, this is usually the purpose which is transmitted via the \"InstrForDbtrAgt\" field in the ISO20022 file. If you are using Currencycloud, this is the `payment.purpose_code` field. For `eft`, this field is the 3 digit CPA Code that will be attached to the payment.",
            "nullable" : true
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "charge_bearer" : {
            "type" : "string",
            "description" : "The party that will pay the fees for the payment order. Only applies to wire payment orders. Can be one of shared, sender, or receiver, which correspond respectively with the SWIFT 71A values `SHA`, `OUR`, `BEN`.",
            "nullable" : true,
            "enum" : [ "shared", "sender", "receiver" ]
          },
          "foreign_exchange_indicator" : {
            "type" : "string",
            "description" : "Indicates the type of FX transfer to initiate, can be either `variable_to_fixed`, `fixed_to_variable`, or `null` if the payment order currency matches the originating account currency.",
            "nullable" : true,
            "enum" : [ "fixed_to_variable", "variable_to_fixed" ]
          },
          "foreign_exchange_contract" : {
            "type" : "string",
            "description" : "If present, indicates a specific foreign exchange contract number that has been generated by your financial institution.",
            "nullable" : true
          },
          "nsf_protected" : {
            "type" : "boolean",
            "description" : "A boolean to determine if NSF Protection is enabled for this payment order. Note that this setting must also be turned on in your organization settings page."
          },
          "originating_party_name" : {
            "type" : "string",
            "description" : "If present, this will replace your default company name on receiver's bank statement. This field can only be used for ACH payments currently. For ACH, only the first 16 characters of this string will be used. Any additional characters will be truncated.",
            "nullable" : true
          },
          "ultimate_originating_party_name" : {
            "type" : "string",
            "description" : "Name of the ultimate originator of the payment order.",
            "nullable" : true
          },
          "ultimate_originating_party_identifier" : {
            "type" : "string",
            "description" : "Identifier of the ultimate originator of the payment order.",
            "nullable" : true
          },
          "ultimate_receiving_party_name" : {
            "type" : "string",
            "nullable" : true
          },
          "ultimate_receiving_party_identifier" : {
            "type" : "string",
            "nullable" : true
          },
          "send_remittance_advice" : {
            "type" : "boolean",
            "description" : "Send an email to the counterparty when the payment order is sent to the bank. If `null`, `send_remittance_advice` on the Counterparty is used.",
            "nullable" : true
          },
          "expires_at" : {
            "type" : "string",
            "description" : "RFP payments require an expires_at. This value must be past the effective_date.",
            "format" : "date-time",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "description" : "The current status of the payment order.",
            "enum" : [ "approved", "cancelled", "completed", "denied", "failed", "needs_approval", "pending", "processing", "returned", "reversed", "sent" ]
          },
          "receiving_account" : {
            "description" : "The receiving account. Can be an `external_account` or `internal_account`.",
            "nullable" : true,
            "deprecated" : true,
            "oneOf" : [ {
              "minProperties" : 17,
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string",
                  "format" : "uuid"
                },
                "object" : {
                  "type" : "string"
                },
                "live_mode" : {
                  "type" : "boolean",
                  "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
                },
                "created_at" : {
                  "type" : "string",
                  "format" : "date-time"
                },
                "updated_at" : {
                  "type" : "string",
                  "format" : "date-time"
                },
                "discarded_at" : {
                  "type" : "string",
                  "format" : "date-time",
                  "nullable" : true
                },
                "account_type" : {
                  "type" : "string",
                  "description" : "Can be `checking`, `savings` or `other`.",
                  "enum" : [ "cash", "checking", "loan", "non_resident", "other", "overdraft", "savings" ]
                },
                "party_type" : {
                  "type" : "string",
                  "description" : "Either `individual` or `business`.",
                  "nullable" : true,
                  "enum" : [ "business", "individual" ]
                },
                "party_address" : {
                  "$ref" : "#/components/schemas/address"
                },
                "name" : {
                  "type" : "string",
                  "description" : "A nickname for the external account. This is only for internal usage and won't affect any payments",
                  "nullable" : true
                },
                "account_details" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/account_detail"
                  }
                },
                "routing_details" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/routing_detail"
                  }
                },
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
                  "example" : {
                    "key" : "value",
                    "foo" : "bar",
                    "modern" : "treasury"
                  }
                },
                "party_name" : {
                  "type" : "string",
                  "description" : "The legal name of the entity which owns the account."
                },
                "contact_details" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/contact_detail"
                  }
                },
                "ledger_account_id" : {
                  "type" : "string",
                  "description" : "If the external account links to a ledger account in Modern Treasury, the id of the ledger account will be populated here.",
                  "format" : "uuid",
                  "nullable" : true
                },
                "verification_status" : {
                  "type" : "string",
                  "enum" : [ "pending_verification", "unverified", "verified" ]
                }
              },
              "additionalProperties" : false
            }, {
              "$ref" : "#/components/schemas/internal_account"
            } ]
          },
          "receiving_account_type" : {
            "type" : "string",
            "enum" : [ "internal_account", "external_account" ]
          },
          "counterparty_id" : {
            "type" : "string",
            "description" : "If the payment order is tied to a specific Counterparty, their id will appear, otherwise `null`.",
            "format" : "uuid",
            "nullable" : true
          },
          "transaction_ids" : {
            "type" : "array",
            "description" : "The IDs of all the transactions associated to this payment order. Usually, you will only have a single transaction ID. However, if a payment order initially results in a Return, but gets redrafted and is later successfully completed, it can have many transactions.",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          },
          "ledger_transaction_id" : {
            "type" : "string",
            "description" : "The ID of the ledger transaction linked to the payment order.",
            "format" : "uuid",
            "nullable" : true
          },
          "current_return" : {
            "$ref" : "#/components/schemas/return"
          },
          "transaction_monitoring_enabled" : {
            "type" : "boolean",
            "description" : "A flag that determines whether a payment order should go through transaction monitoring."
          },
          "compliance_rule_metadata" : {
            "type" : "object",
            "description" : "Custom key-value pair for usage in compliance rules. Please contact support before making changes to this field.",
            "nullable" : true
          },
          "reference_numbers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/payment_reference"
            }
          },
          "vendor_failure_reason" : {
            "type" : "string",
            "description" : "This field will be populated if a vendor (e.g. Currencycloud) failure occurs. Logic shouldn't be built on its value as it is free-form.",
            "nullable" : true
          },
          "decision_id" : {
            "type" : "string",
            "description" : "The ID of the compliance decision for the payment order, if transaction monitoring is enabled.",
            "format" : "uuid",
            "nullable" : true
          }
        },
        "additionalProperties" : false
      },
      "payment_order_create_request" : {
        "required" : [ "amount", "direction", "originating_account_id", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "One of `ach`, `bankgirot`, `eft`, `wire`, `check`, `sen`, `book`, `rtp`, `sepa`, `bacs`, `au_becs`, `interac`, `neft`, `nics`, `sic`, `signet`, `provexchange`, `zengin`.",
            "enum" : [ "ach", "au_becs", "bacs", "book", "card", "check", "cross_border", "eft", "interac", "masav", "neft", "nics", "provxchange", "rtp", "se_bankgirot", "sen", "sepa", "sic", "signet", "wire", "zengin" ]
          },
          "subtype" : {
            "type" : "string",
            "description" : "An additional layer of classification for the type of payment order you are doing. This field is only used for `ach` payment orders currently. For `ach`  payment orders, the `subtype`  represents the SEC code. We currently support `CCD`, `PPD`, `IAT`, `CTX`, `WEB`, `CIE`, and `TEL`.",
            "nullable" : true,
            "enum" : [ "0C", "0N", "0S", "CCD", "CIE", "CTX", "IAT", "PPD", "TEL", "WEB" ]
          },
          "amount" : {
            "type" : "integer",
            "description" : "Value in specified currency's smallest unit. e.g. $10 would be represented as 1000 (cents). For RTP, the maximum amount allowed by the network is $100,000."
          },
          "direction" : {
            "type" : "string",
            "description" : "One of `credit`, `debit`. Describes the direction money is flowing in the transaction. A `credit` moves money from your account to someone else's. A `debit` pulls money from someone else's account to your own. Note that wire, rtp, and check payments will always be `credit`.",
            "enum" : [ "credit", "debit" ]
          },
          "priority" : {
            "type" : "string",
            "description" : "Either `normal` or `high`. For ACH and EFT payments, `high` represents a same-day ACH or EFT transfer, respectively. For check payments, `high` can mean an overnight check rather than standard mail.",
            "enum" : [ "high", "normal" ]
          },
          "originating_account_id" : {
            "type" : "string",
            "description" : "The ID of one of your organization's internal accounts.",
            "format" : "uuid"
          },
          "receiving_account_id" : {
            "type" : "string",
            "description" : "Either `receiving_account` or `receiving_account_id` must be present. When using `receiving_account_id`, you may pass the id of an external account or an internal account.",
            "format" : "uuid"
          },
          "accounting" : {
            "$ref" : "#/components/schemas/accounting"
          },
          "accounting_category_id" : {
            "type" : "string",
            "description" : "The ID of one of your accounting categories. Note that these will only be accessible if your accounting system has been connected.",
            "format" : "uuid",
            "nullable" : true,
            "deprecated" : true
          },
          "accounting_ledger_class_id" : {
            "type" : "string",
            "description" : "The ID of one of your accounting ledger classes. Note that these will only be accessible if your accounting system has been connected.",
            "format" : "uuid",
            "nullable" : true,
            "deprecated" : true
          },
          "currency" : {
            "$ref" : "#/components/schemas/currency"
          },
          "effective_date" : {
            "type" : "string",
            "description" : "Date transactions are to be posted to the participants' account. Defaults to the current business day or the next business day if the current day is a bank holiday or weekend. Format: yyyy-mm-dd.",
            "format" : "date"
          },
          "description" : {
            "type" : "string",
            "description" : "An optional description for internal use.",
            "nullable" : true
          },
          "statement_descriptor" : {
            "type" : "string",
            "description" : "An optional descriptor which will appear in the receiver's statement. For `check` payments this field will be used as the memo line. For `ach` the maximum length is 10 characters. Note that for ACH payments, the name on your bank account will be included automatically by the bank, so you can use the characters for other useful information. For `eft` the maximum length is 15 characters.",
            "nullable" : true
          },
          "remittance_information" : {
            "type" : "string",
            "description" : "For `ach`, this field will be passed through on an addenda record. For `wire` payments the field will be passed through as the \"Originator to Beneficiary Information\", also known as OBI or Fedwire tag 6000.",
            "nullable" : true
          },
          "purpose" : {
            "type" : "string",
            "description" : "For `wire`, this is usually the purpose which is transmitted via the \"InstrForDbtrAgt\" field in the ISO20022 file. If you are using Currencycloud, this is the `payment.purpose_code` field. For `eft`, this field is the 3 digit CPA Code that will be attached to the payment.",
            "nullable" : true
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "charge_bearer" : {
            "type" : "string",
            "description" : "The party that will pay the fees for the payment order. Only applies to wire payment orders. Can be one of shared, sender, or receiver, which correspond respectively with the SWIFT 71A values `SHA`, `OUR`, `BEN`.",
            "nullable" : true,
            "enum" : [ "shared", "sender", "receiver" ]
          },
          "foreign_exchange_indicator" : {
            "type" : "string",
            "description" : "Indicates the type of FX transfer to initiate, can be either `variable_to_fixed`, `fixed_to_variable`, or `null` if the payment order currency matches the originating account currency.",
            "nullable" : true,
            "enum" : [ "fixed_to_variable", "variable_to_fixed" ]
          },
          "foreign_exchange_contract" : {
            "type" : "string",
            "description" : "If present, indicates a specific foreign exchange contract number that has been generated by your financial institution.",
            "nullable" : true
          },
          "nsf_protected" : {
            "type" : "boolean",
            "description" : "A boolean to determine if NSF Protection is enabled for this payment order. Note that this setting must also be turned on in your organization settings page."
          },
          "originating_party_name" : {
            "type" : "string",
            "description" : "If present, this will replace your default company name on receiver's bank statement. This field can only be used for ACH payments currently. For ACH, only the first 16 characters of this string will be used. Any additional characters will be truncated.",
            "nullable" : true
          },
          "ultimate_originating_party_name" : {
            "type" : "string",
            "description" : "Name of the ultimate originator of the payment order.",
            "nullable" : true
          },
          "ultimate_originating_party_identifier" : {
            "type" : "string",
            "description" : "Identifier of the ultimate originator of the payment order.",
            "nullable" : true
          },
          "ultimate_receiving_party_name" : {
            "type" : "string",
            "description" : "Name of the ultimate funds recipient.",
            "nullable" : true
          },
          "ultimate_receiving_party_identifier" : {
            "type" : "string",
            "description" : "Identifier of the ultimate funds recipient.",
            "nullable" : true
          },
          "send_remittance_advice" : {
            "type" : "boolean",
            "description" : "Send an email to the counterparty when the payment order is sent to the bank. If `null`, `send_remittance_advice` on the Counterparty is used.",
            "nullable" : true
          },
          "expires_at" : {
            "type" : "string",
            "description" : "RFP payments require an expires_at. This value must be past the effective_date.",
            "format" : "date-time",
            "nullable" : true
          },
          "fallback_type" : {
            "type" : "string",
            "description" : "A payment type to fallback to if the original type is not valid for the receiving account. Currently, this only supports falling back from RTP to ACH (type=rtp and fallback_type=ach)",
            "enum" : [ "ach" ]
          },
          "receiving_account" : {
            "$ref" : "#/components/schemas/payment_order_create_request_receiving_account"
          },
          "ledger_transaction" : {
            "$ref" : "#/components/schemas/ledger_transaction_create_request"
          },
          "line_items" : {
            "type" : "array",
            "description" : "An array of line items that must sum up to the amount of the payment order.",
            "items" : {
              "$ref" : "#/components/schemas/line_item_request"
            }
          },
          "transaction_monitoring_enabled" : {
            "type" : "boolean",
            "description" : "A flag that determines whether a payment order should go through transaction monitoring."
          },
          "documents" : {
            "type" : "array",
            "description" : "An array of documents to be attached to the payment order. Note that if you attach documents, the request's content type must be `multipart/form-data`.",
            "items" : {
              "$ref" : "#/components/schemas/document_create_request"
            }
          }
        }
      },
      "payment_order_async_create_request" : {
        "required" : [ "amount", "direction", "originating_account_id", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "One of `ach`, `bankgirot`, `eft`, `wire`, `check`, `sen`, `book`, `rtp`, `sepa`, `bacs`, `au_becs`, `interac`, `neft`, `nics`, `sic`, `signet`, `provexchange`, `zengin`.",
            "enum" : [ "ach", "au_becs", "bacs", "book", "card", "check", "cross_border", "eft", "interac", "masav", "neft", "nics", "provxchange", "rtp", "se_bankgirot", "sen", "sepa", "sic", "signet", "wire", "zengin" ]
          },
          "subtype" : {
            "type" : "string",
            "description" : "An additional layer of classification for the type of payment order you are doing. This field is only used for `ach` payment orders currently. For `ach`  payment orders, the `subtype`  represents the SEC code. We currently support `CCD`, `PPD`, `IAT`, `CTX`, `WEB`, `CIE`, and `TEL`.",
            "nullable" : true,
            "enum" : [ "0C", "0N", "0S", "CCD", "CIE", "CTX", "IAT", "PPD", "TEL", "WEB" ]
          },
          "amount" : {
            "type" : "integer",
            "description" : "Value in specified currency's smallest unit. e.g. $10 would be represented as 1000 (cents). For RTP, the maximum amount allowed by the network is $100,000."
          },
          "direction" : {
            "type" : "string",
            "description" : "One of `credit`, `debit`. Describes the direction money is flowing in the transaction. A `credit` moves money from your account to someone else's. A `debit` pulls money from someone else's account to your own. Note that wire, rtp, and check payments will always be `credit`.",
            "enum" : [ "credit", "debit" ]
          },
          "priority" : {
            "type" : "string",
            "description" : "Either `normal` or `high`. For ACH and EFT payments, `high` represents a same-day ACH or EFT transfer, respectively. For check payments, `high` can mean an overnight check rather than standard mail.",
            "enum" : [ "high", "normal" ]
          },
          "originating_account_id" : {
            "type" : "string",
            "description" : "The ID of one of your organization's internal accounts.",
            "format" : "uuid"
          },
          "receiving_account_id" : {
            "type" : "string",
            "description" : "Either `receiving_account` or `receiving_account_id` must be present. When using `receiving_account_id`, you may pass the id of an external account or an internal account.",
            "format" : "uuid"
          },
          "accounting" : {
            "$ref" : "#/components/schemas/accounting"
          },
          "accounting_category_id" : {
            "type" : "string",
            "description" : "The ID of one of your accounting categories. Note that these will only be accessible if your accounting system has been connected.",
            "format" : "uuid",
            "nullable" : true,
            "deprecated" : true
          },
          "accounting_ledger_class_id" : {
            "type" : "string",
            "description" : "The ID of one of your accounting ledger classes. Note that these will only be accessible if your accounting system has been connected.",
            "format" : "uuid",
            "nullable" : true,
            "deprecated" : true
          },
          "currency" : {
            "$ref" : "#/components/schemas/currency"
          },
          "effective_date" : {
            "type" : "string",
            "description" : "Date transactions are to be posted to the participants' account. Defaults to the current business day or the next business day if the current day is a bank holiday or weekend. Format: yyyy-mm-dd.",
            "format" : "date"
          },
          "description" : {
            "type" : "string",
            "description" : "An optional description for internal use.",
            "nullable" : true
          },
          "statement_descriptor" : {
            "type" : "string",
            "description" : "An optional descriptor which will appear in the receiver's statement. For `check` payments this field will be used as the memo line. For `ach` the maximum length is 10 characters. Note that for ACH payments, the name on your bank account will be included automatically by the bank, so you can use the characters for other useful information. For `eft` the maximum length is 15 characters.",
            "nullable" : true
          },
          "remittance_information" : {
            "type" : "string",
            "description" : "For `ach`, this field will be passed through on an addenda record. For `wire` payments the field will be passed through as the \"Originator to Beneficiary Information\", also known as OBI or Fedwire tag 6000.",
            "nullable" : true
          },
          "purpose" : {
            "type" : "string",
            "description" : "For `wire`, this is usually the purpose which is transmitted via the \"InstrForDbtrAgt\" field in the ISO20022 file. If you are using Currencycloud, this is the `payment.purpose_code` field. For `eft`, this field is the 3 digit CPA Code that will be attached to the payment.",
            "nullable" : true
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "charge_bearer" : {
            "type" : "string",
            "description" : "The party that will pay the fees for the payment order. Only applies to wire payment orders. Can be one of shared, sender, or receiver, which correspond respectively with the SWIFT 71A values `SHA`, `OUR`, `BEN`.",
            "nullable" : true,
            "enum" : [ "shared", "sender", "receiver" ]
          },
          "foreign_exchange_indicator" : {
            "type" : "string",
            "description" : "Indicates the type of FX transfer to initiate, can be either `variable_to_fixed`, `fixed_to_variable`, or `null` if the payment order currency matches the originating account currency.",
            "nullable" : true,
            "enum" : [ "fixed_to_variable", "variable_to_fixed" ]
          },
          "foreign_exchange_contract" : {
            "type" : "string",
            "description" : "If present, indicates a specific foreign exchange contract number that has been generated by your financial institution.",
            "nullable" : true
          },
          "nsf_protected" : {
            "type" : "boolean",
            "description" : "A boolean to determine if NSF Protection is enabled for this payment order. Note that this setting must also be turned on in your organization settings page."
          },
          "originating_party_name" : {
            "type" : "string",
            "description" : "If present, this will replace your default company name on receiver's bank statement. This field can only be used for ACH payments currently. For ACH, only the first 16 characters of this string will be used. Any additional characters will be truncated.",
            "nullable" : true
          },
          "ultimate_originating_party_name" : {
            "type" : "string",
            "description" : "Name of the ultimate originator of the payment order.",
            "nullable" : true
          },
          "ultimate_originating_party_identifier" : {
            "type" : "string",
            "description" : "Identifier of the ultimate originator of the payment order.",
            "nullable" : true
          },
          "ultimate_receiving_party_name" : {
            "type" : "string",
            "description" : "Name of the ultimate funds recipient.",
            "nullable" : true
          },
          "ultimate_receiving_party_identifier" : {
            "type" : "string",
            "description" : "Identifier of the ultimate funds recipient.",
            "nullable" : true
          },
          "send_remittance_advice" : {
            "type" : "boolean",
            "description" : "Send an email to the counterparty when the payment order is sent to the bank. If `null`, `send_remittance_advice` on the Counterparty is used.",
            "nullable" : true
          },
          "expires_at" : {
            "type" : "string",
            "description" : "RFP payments require an expires_at. This value must be past the effective_date.",
            "format" : "date-time",
            "nullable" : true
          },
          "fallback_type" : {
            "type" : "string",
            "description" : "A payment type to fallback to if the original type is not valid for the receiving account. Currently, this only supports falling back from RTP to ACH (type=rtp and fallback_type=ach)",
            "enum" : [ "ach" ]
          },
          "receiving_account" : {
            "$ref" : "#/components/schemas/payment_order_create_request_receiving_account"
          },
          "ledger_transaction" : {
            "$ref" : "#/components/schemas/ledger_transaction_create_request"
          },
          "line_items" : {
            "type" : "array",
            "description" : "An array of line items that must sum up to the amount of the payment order.",
            "items" : {
              "$ref" : "#/components/schemas/line_item_request"
            }
          },
          "transaction_monitoring_enabled" : {
            "type" : "boolean",
            "description" : "A flag that determines whether a payment order should go through transaction monitoring."
          }
        }
      },
      "payment_order_update_request" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "One of `ach`, `bankgirot`, `eft`, `wire`, `check`, `sen`, `book`, `rtp`, `sepa`, `bacs`, `au_becs`, `interac`, `neft`, `nics`, `sic`, `signet`, `provexchange`, `zengin`.",
            "enum" : [ "ach", "au_becs", "bacs", "book", "card", "check", "cross_border", "eft", "interac", "masav", "neft", "nics", "provxchange", "rtp", "se_bankgirot", "sen", "sepa", "sic", "signet", "wire", "zengin" ]
          },
          "subtype" : {
            "type" : "string",
            "description" : "An additional layer of classification for the type of payment order you are doing. This field is only used for `ach` payment orders currently. For `ach`  payment orders, the `subtype`  represents the SEC code. We currently support `CCD`, `PPD`, `IAT`, `CTX`, `WEB`, `CIE`, and `TEL`.",
            "nullable" : true,
            "enum" : [ "0C", "0N", "0S", "CCD", "CIE", "CTX", "IAT", "PPD", "TEL", "WEB" ]
          },
          "amount" : {
            "type" : "integer",
            "description" : "Value in specified currency's smallest unit. e.g. $10 would be represented as 1000 (cents). For RTP, the maximum amount allowed by the network is $100,000."
          },
          "direction" : {
            "type" : "string",
            "description" : "One of `credit`, `debit`. Describes the direction money is flowing in the transaction. A `credit` moves money from your account to someone else's. A `debit` pulls money from someone else's account to your own. Note that wire, rtp, and check payments will always be `credit`.",
            "enum" : [ "credit", "debit" ]
          },
          "priority" : {
            "type" : "string",
            "description" : "Either `normal` or `high`. For ACH and EFT payments, `high` represents a same-day ACH or EFT transfer, respectively. For check payments, `high` can mean an overnight check rather than standard mail.",
            "enum" : [ "high", "normal" ]
          },
          "originating_account_id" : {
            "type" : "string",
            "description" : "The ID of one of your organization's internal accounts.",
            "format" : "uuid"
          },
          "receiving_account_id" : {
            "type" : "string",
            "description" : "Either `receiving_account` or `receiving_account_id` must be present. When using `receiving_account_id`, you may pass the id of an external account or an internal account.",
            "format" : "uuid"
          },
          "accounting" : {
            "$ref" : "#/components/schemas/accounting"
          },
          "accounting_category_id" : {
            "type" : "string",
            "description" : "The ID of one of your accounting categories. Note that these will only be accessible if your accounting system has been connected.",
            "format" : "uuid",
            "nullable" : true,
            "deprecated" : true
          },
          "accounting_ledger_class_id" : {
            "type" : "string",
            "description" : "The ID of one of your accounting ledger classes. Note that these will only be accessible if your accounting system has been connected.",
            "format" : "uuid",
            "nullable" : true,
            "deprecated" : true
          },
          "currency" : {
            "$ref" : "#/components/schemas/currency"
          },
          "effective_date" : {
            "type" : "string",
            "description" : "Date transactions are to be posted to the participants' account. Defaults to the current business day or the next business day if the current day is a bank holiday or weekend. Format: yyyy-mm-dd.",
            "format" : "date"
          },
          "description" : {
            "type" : "string",
            "description" : "An optional description for internal use.",
            "nullable" : true
          },
          "statement_descriptor" : {
            "type" : "string",
            "description" : "An optional descriptor which will appear in the receiver's statement. For `check` payments this field will be used as the memo line. For `ach` the maximum length is 10 characters. Note that for ACH payments, the name on your bank account will be included automatically by the bank, so you can use the characters for other useful information. For `eft` the maximum length is 15 characters.",
            "nullable" : true
          },
          "remittance_information" : {
            "type" : "string",
            "description" : "For `ach`, this field will be passed through on an addenda record. For `wire` payments the field will be passed through as the \"Originator to Beneficiary Information\", also known as OBI or Fedwire tag 6000.",
            "nullable" : true
          },
          "purpose" : {
            "type" : "string",
            "description" : "For `wire`, this is usually the purpose which is transmitted via the \"InstrForDbtrAgt\" field in the ISO20022 file. If you are using Currencycloud, this is the `payment.purpose_code` field. For `eft`, this field is the 3 digit CPA Code that will be attached to the payment.",
            "nullable" : true
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "charge_bearer" : {
            "type" : "string",
            "description" : "The party that will pay the fees for the payment order. Only applies to wire payment orders. Can be one of shared, sender, or receiver, which correspond respectively with the SWIFT 71A values `SHA`, `OUR`, `BEN`.",
            "nullable" : true,
            "enum" : [ "shared", "sender", "receiver" ]
          },
          "foreign_exchange_indicator" : {
            "type" : "string",
            "description" : "Indicates the type of FX transfer to initiate, can be either `variable_to_fixed`, `fixed_to_variable`, or `null` if the payment order currency matches the originating account currency.",
            "nullable" : true,
            "enum" : [ "fixed_to_variable", "variable_to_fixed" ]
          },
          "foreign_exchange_contract" : {
            "type" : "string",
            "description" : "If present, indicates a specific foreign exchange contract number that has been generated by your financial institution.",
            "nullable" : true
          },
          "nsf_protected" : {
            "type" : "boolean",
            "description" : "A boolean to determine if NSF Protection is enabled for this payment order. Note that this setting must also be turned on in your organization settings page."
          },
          "originating_party_name" : {
            "type" : "string",
            "description" : "If present, this will replace your default company name on receiver's bank statement. This field can only be used for ACH payments currently. For ACH, only the first 16 characters of this string will be used. Any additional characters will be truncated.",
            "nullable" : true
          },
          "ultimate_originating_party_name" : {
            "type" : "string",
            "description" : "This represents the name of the person that the payment is on behalf of when using the CIE subtype for ACH payments. Only the first 15 characters of this string will be used. Any additional characters will be truncated.",
            "nullable" : true
          },
          "ultimate_originating_party_identifier" : {
            "type" : "string",
            "description" : "This represents the identifier by which the person is known to the receiver when using the CIE subtype for ACH payments. Only the first 22 characters of this string will be used. Any additional characters will be truncated.",
            "nullable" : true
          },
          "ultimate_receiving_party_name" : {
            "type" : "string",
            "description" : "This represents the identifier by which the merchant is known to the person initiating an ACH payment with CIE subtype. Only the first 15 characters of this string will be used. Any additional characters will be truncated.",
            "nullable" : true
          },
          "ultimate_receiving_party_identifier" : {
            "type" : "string",
            "description" : "This represents the name of the merchant that the payment is being sent to when using the CIE subtype for ACH payments. Only the first 22 characters of this string will be used. Any additional characters will be truncated.",
            "nullable" : true
          },
          "send_remittance_advice" : {
            "type" : "boolean",
            "description" : "Send an email to the counterparty when the payment order is sent to the bank. If `null`, `send_remittance_advice` on the Counterparty is used.",
            "nullable" : true
          },
          "expires_at" : {
            "type" : "string",
            "description" : "RFP payments require an expires_at. This value must be past the effective_date.",
            "format" : "date-time",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "description" : "To cancel a payment order, use `cancelled`. To redraft a returned payment order, use `approved`. To undo approval on a denied or approved payment order, use `needs_approval`.",
            "enum" : [ "approved", "cancelled", "completed", "denied", "failed", "needs_approval", "pending", "processing", "returned", "reversed", "sent" ]
          },
          "counterparty_id" : {
            "type" : "string",
            "description" : "Required when receiving_account_id is passed the ID of an external account.",
            "format" : "uuid",
            "nullable" : true
          },
          "fallback_type" : {
            "type" : "string",
            "description" : "A payment type to fallback to if the original type is not valid for the receiving account. Currently, this only supports falling back from RTP to ACH (type=rtp and fallback_type=ach)",
            "enum" : [ "ach" ]
          },
          "receiving_account" : {
            "$ref" : "#/components/schemas/payment_order_create_request_receiving_account"
          },
          "line_items" : {
            "type" : "array",
            "description" : "An array of line items that must sum up to the amount of the payment order.",
            "items" : {
              "$ref" : "#/components/schemas/line_item_request"
            }
          }
        }
      },
      "payment_reference" : {
        "minProperties" : 7,
        "required" : [ "created_at", "id", "live_mode", "object", "reference_number", "reference_number_type", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "reference_number" : {
            "type" : "string",
            "description" : "The vendor reference number."
          },
          "reference_number_type" : {
            "type" : "string",
            "description" : "The type of the reference number. Referring to the vendor payment id.",
            "enum" : [ "ach_original_trace_number", "ach_trace_number", "bankprov_payment_activity_date", "bankprov_payment_id", "bnk_dev_prenotification_id", "bnk_dev_transfer_id", "bofa_end_to_end_id", "bofa_transaction_id", "check_number", "column_fx_quote_id", "column_reversal_pair_transfer_id", "column_transfer_id", "cross_river_payment_id", "cross_river_transaction_id", "currencycloud_conversion_id", "currencycloud_payment_id", "dc_bank_transaction_id", "dwolla_transaction_id", "eft_trace_number", "evolve_transaction_id", "fedwire_imad", "fedwire_omad", "first_republic_internal_id", "goldman_sachs_collection_request_id", "goldman_sachs_end_to_end_id", "goldman_sachs_payment_request_id", "goldman_sachs_request_id", "goldman_sachs_unique_payment_id", "interac_message_id", "jpmc_ccn", "jpmc_customer_reference_id", "jpmc_end_to_end_id", "jpmc_firm_root_id", "jpmc_p3_id", "jpmc_payment_batch_id", "jpmc_payment_information_id", "jpmc_payment_returned_datetime", "lob_check_id", "other", "partial_swift_mir", "pnc_clearing_reference", "pnc_instruction_id", "pnc_multipayment_id", "pnc_payment_trace_id", "rspec_vendor_payment_id", "rtp_instruction_id", "signet_api_reference_id", "signet_confirmation_id", "signet_request_id", "silvergate_payment_id", "swift_mir", "swift_uetr", "usbank_payment_id", "wells_fargo_payment_id", "wells_fargo_trace_number" ]
          }
        },
        "additionalProperties" : false
      },
      "payment_reference_object" : {
        "minProperties" : 9,
        "required" : [ "created_at", "id", "live_mode", "object", "reference_number", "reference_number_type", "referenceable_id", "referenceable_type", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "referenceable_id" : {
            "type" : "string",
            "description" : "The id of the referenceable to search for. Must be accompanied by the referenceable_type or will return an error."
          },
          "referenceable_type" : {
            "type" : "string",
            "description" : "One of the referenceable types. This must be accompanied by the id of the referenceable or will return an error.",
            "enum" : [ "payment_order", "reversal", "return" ]
          },
          "reference_number" : {
            "type" : "string",
            "description" : "The actual reference number assigned by the bank."
          },
          "reference_number_type" : {
            "type" : "string",
            "description" : "The type of reference number.",
            "enum" : [ "ach_original_trace_number", "ach_trace_number", "bankprov_payment_activity_date", "bankprov_payment_id", "bnk_dev_prenotification_id", "bnk_dev_transfer_id", "bofa_end_to_end_id", "bofa_transaction_id", "check_number", "column_fx_quote_id", "column_reversal_pair_transfer_id", "column_transfer_id", "cross_river_payment_id", "cross_river_transaction_id", "currencycloud_conversion_id", "currencycloud_payment_id", "dc_bank_transaction_id", "dwolla_transaction_id", "eft_trace_number", "evolve_transaction_id", "fedwire_imad", "fedwire_omad", "first_republic_internal_id", "goldman_sachs_collection_request_id", "goldman_sachs_end_to_end_id", "goldman_sachs_payment_request_id", "goldman_sachs_request_id", "goldman_sachs_unique_payment_id", "interac_message_id", "jpmc_ccn", "jpmc_customer_reference_id", "jpmc_end_to_end_id", "jpmc_firm_root_id", "jpmc_p3_id", "jpmc_payment_batch_id", "jpmc_payment_information_id", "jpmc_payment_returned_datetime", "lob_check_id", "other", "partial_swift_mir", "pnc_clearing_reference", "pnc_instruction_id", "pnc_multipayment_id", "pnc_payment_trace_id", "rspec_vendor_payment_id", "rtp_instruction_id", "signet_api_reference_id", "signet_confirmation_id", "signet_request_id", "silvergate_payment_id", "swift_mir", "swift_uetr", "usbank_payment_id", "wells_fargo_payment_id", "wells_fargo_trace_number" ]
          }
        },
        "additionalProperties" : false
      },
      "ping_response" : {
        "minProperties" : 1,
        "required" : [ "ping" ],
        "type" : "object",
        "properties" : {
          "ping" : {
            "type" : "string",
            "example" : "pong"
          }
        },
        "additionalProperties" : false
      },
      "return" : {
        "minProperties" : 23,
        "required" : [ "additional_information", "amount", "code", "created_at", "currency", "current_return", "date_of_death", "failure_reason", "id", "internal_account_id", "ledger_transaction_id", "live_mode", "object", "reason", "reference_numbers", "returnable_id", "returnable_type", "role", "status", "transaction_id", "transaction_line_item_id", "type", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "returnable_id" : {
            "type" : "string",
            "description" : "The ID of the object being returned or `null`.",
            "format" : "uuid",
            "nullable" : true
          },
          "returnable_type" : {
            "type" : "string",
            "description" : "The type of object being returned or `null`.",
            "nullable" : true,
            "enum" : [ "incoming_payment_detail", "paper_item", "payment_order", "return", "reversal" ]
          },
          "code" : {
            "type" : "string",
            "description" : "The return code. For ACH returns, this is the required ACH return code.",
            "nullable" : true,
            "enum" : [ "901", "902", "903", "904", "905", "907", "908", "909", "910", "911", "912", "914", "R01", "R02", "R03", "R04", "R05", "R06", "R07", "R08", "R09", "R10", "R11", "R12", "R14", "R15", "R16", "R17", "R20", "R21", "R22", "R23", "R24", "R29", "R31", "R33", "R37", "R38", "R39", "R51", "R52", "R53", "currencycloud" ]
          },
          "reason" : {
            "type" : "string",
            "description" : "Often the bank will provide an explanation for the return, which is a short human readable string.",
            "nullable" : true
          },
          "date_of_death" : {
            "type" : "string",
            "description" : "If the return code is `R14` or `R15` this is the date the deceased counterparty passed away.",
            "format" : "date",
            "nullable" : true
          },
          "additional_information" : {
            "type" : "string",
            "description" : "Some returns may include additional information from the bank. In these cases, this string will be present.",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "description" : "The current status of the return.",
            "enum" : [ "completed", "failed", "pending", "processing", "returned", "sent" ]
          },
          "transaction_line_item_id" : {
            "type" : "string",
            "description" : "The ID of the relevant Transaction Line Item or `null`.",
            "format" : "uuid",
            "nullable" : true
          },
          "transaction_id" : {
            "type" : "string",
            "description" : "The ID of the relevant Transaction or `null`.",
            "format" : "uuid",
            "nullable" : true
          },
          "internal_account_id" : {
            "type" : "string",
            "description" : "The ID of the relevant Internal Account.",
            "format" : "uuid",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "description" : "The type of return. Can be one of: `ach`, `ach_noc`, `au_becs`, `bacs`, `eft`, `interac`, `manual`, `paper_item`, `wire`.",
            "enum" : [ "ach", "ach_noc", "au_becs", "bacs", "book", "check", "eft", "interac", "manual", "paper_item", "sepa", "wire" ]
          },
          "amount" : {
            "type" : "integer",
            "description" : "Value in specified currency's smallest unit. e.g. $10 would be represented as 1000."
          },
          "currency" : {
            "$ref" : "#/components/schemas/currency"
          },
          "failure_reason" : {
            "type" : "string",
            "description" : "If an originating return failed to be processed by the bank, a description of the failure reason will be available.",
            "nullable" : true
          },
          "role" : {
            "type" : "string",
            "description" : "The role of the return, can be `originating` or `receiving`.",
            "enum" : [ "originating", "receiving" ]
          },
          "current_return" : {
            "$ref" : "#/components/schemas/return"
          },
          "reference_numbers" : {
            "type" : "array",
            "description" : "An array of Payment Reference objects.",
            "items" : {
              "$ref" : "#/components/schemas/payment_reference"
            }
          },
          "ledger_transaction_id" : {
            "type" : "string",
            "description" : "The ID of the ledger transaction linked to the return.",
            "format" : "uuid",
            "nullable" : true
          }
        },
        "additionalProperties" : false
      },
      "return_create_request" : {
        "required" : [ "returnable_id", "returnable_type" ],
        "type" : "object",
        "properties" : {
          "returnable_id" : {
            "type" : "string",
            "description" : "The ID of the object being returned or `null`.",
            "format" : "uuid",
            "nullable" : true
          },
          "code" : {
            "type" : "string",
            "description" : "The return code. For ACH returns, this is the required ACH return code.",
            "nullable" : true,
            "enum" : [ "901", "902", "903", "904", "905", "907", "908", "909", "910", "911", "912", "914", "R01", "R02", "R03", "R04", "R05", "R06", "R07", "R08", "R09", "R10", "R11", "R12", "R14", "R15", "R16", "R17", "R20", "R21", "R22", "R23", "R24", "R29", "R31", "R33", "R37", "R38", "R39", "R51", "R52", "R53", "currencycloud" ]
          },
          "reason" : {
            "type" : "string",
            "description" : "An optional description of the reason for the return. This is for internal usage and will not be transmitted to the bank.”",
            "nullable" : true
          },
          "date_of_death" : {
            "type" : "string",
            "description" : "If the return code is `R14` or `R15` this is the date the deceased counterparty passed away.",
            "format" : "date",
            "nullable" : true
          },
          "additional_information" : {
            "type" : "string",
            "description" : "Some returns may include additional information from the bank. In these cases, this string will be present.",
            "nullable" : true
          },
          "returnable_type" : {
            "type" : "string",
            "description" : "The type of object being returned. Currently, this may only be incoming_payment_detail.",
            "enum" : [ "incoming_payment_detail" ]
          }
        }
      },
      "reversal" : {
        "minProperties" : 9,
        "required" : [ "created_at", "id", "live_mode", "metadata", "object", "payment_order_id", "reason", "status", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "description" : "The current status of the reversal.",
            "enum" : [ "completed", "failed", "pending", "processing", "returned", "sent" ]
          },
          "payment_order_id" : {
            "type" : "string",
            "description" : "The ID of the relevant Payment Order.",
            "format" : "uuid",
            "nullable" : true
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "reason" : {
            "type" : "string",
            "description" : "The reason for the reversal.",
            "enum" : [ "duplicate", "incorrect_amount", "incorrect_receiving_account", "date_earlier_than_intended", "date_later_than_intended" ]
          }
        },
        "additionalProperties" : false
      },
      "reversal_create_request" : {
        "required" : [ "reason" ],
        "type" : "object",
        "properties" : {
          "reason" : {
            "type" : "string",
            "description" : "The reason for the reversal. Must be one of `duplicate`, `incorrect_amount`, `incorrect_receiving_account`, `date_earlier_than_intended`, `date_later_than_intended`.",
            "enum" : [ "duplicate", "incorrect_amount", "incorrect_receiving_account", "date_earlier_than_intended", "date_later_than_intended" ]
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "ledger_transaction" : {
            "$ref" : "#/components/schemas/ledger_transaction_create_request"
          }
        }
      },
      "routing_detail" : {
        "minProperties" : 11,
        "required" : [ "bank_address", "bank_name", "created_at", "discarded_at", "id", "live_mode", "object", "payment_type", "routing_number", "routing_number_type", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "discarded_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "routing_number" : {
            "type" : "string",
            "description" : "The routing number of the bank."
          },
          "routing_number_type" : {
            "type" : "string",
            "description" : "One of `aba`, `swift`, `ca_cpa`, `au_bsb`, `gb_sort_code`, `in_ifsc`, `cnaps`.",
            "enum" : [ "aba", "au_bsb", "br_codigo", "ca_cpa", "chips", "cnaps", "gb_sort_code", "in_ifsc", "jp_zengin_code", "my_branch_code", "se_bankgiro_clearing_code", "swift" ]
          },
          "payment_type" : {
            "type" : "string",
            "description" : "If the routing detail is to be used for a specific payment type this field will be populated, otherwise null.",
            "nullable" : true,
            "enum" : [ "ach", "au_becs", "bacs", "book", "card", "check", "cross_border", "eft", "interac", "masav", "neft", "nics", "provxchange", "rtp", "se_bankgirot", "sen", "sepa", "sic", "signet", "wire", "zengin" ]
          },
          "bank_name" : {
            "type" : "string",
            "description" : "The name of the bank."
          },
          "bank_address" : {
            "$ref" : "#/components/schemas/address"
          }
        },
        "additionalProperties" : false
      },
      "routing_detail_create_request" : {
        "required" : [ "routing_number", "routing_number_type" ],
        "type" : "object",
        "properties" : {
          "routing_number" : {
            "type" : "string",
            "description" : "The routing number of the bank."
          },
          "routing_number_type" : {
            "type" : "string",
            "description" : "One of `aba`, `swift`, `ca_cpa`, `au_bsb`, `gb_sort_code`, `in_ifsc`, `cnaps`.",
            "enum" : [ "aba", "au_bsb", "br_codigo", "ca_cpa", "chips", "cnaps", "gb_sort_code", "in_ifsc", "jp_zengin_code", "my_branch_code", "se_bankgiro_clearing_code", "swift" ]
          },
          "payment_type" : {
            "type" : "string",
            "description" : "If the routing detail is to be used for a specific payment type this field will be populated, otherwise null.",
            "nullable" : true,
            "enum" : [ "ach", "au_becs", "bacs", "book", "card", "check", "cross_border", "eft", "interac", "masav", "neft", "nics", "provxchange", "rtp", "se_bankgirot", "sen", "sepa", "sic", "signet", "wire", "zengin" ]
          }
        }
      },
      "routing_number_lookup_request" : {
        "minProperties" : 5,
        "type" : "object",
        "properties" : {
          "routing_number" : {
            "type" : "string",
            "description" : "The routing number of the bank."
          },
          "routing_number_type" : {
            "type" : "string",
            "description" : "One of `aba`, `au_bsb`, `br_codigo`, `ca_cpa`, `cnaps`, `gb_sort_code`, `in_ifsc`, `my_branch_code`, `se_bankgiro_clearing_code`, or `swift`. In sandbox mode we currently only support `aba` and `swift` with routing numbers '123456789' and 'GRINUST0XXX' respectively.",
            "enum" : [ "aba", "au_bsb", "ca_cpa", "gb_sort_code", "in_ifsc", "se_bankgiro_clearing_code", "swift" ]
          },
          "supported_payment_types" : {
            "maxItems" : 21,
            "type" : "array",
            "description" : "An array of payment types that are supported for this routing number. This can include `ach`, `wire`, `rtp`, `sepa`, `bacs`, `au_becs` currently.",
            "example" : [ "ach", "au_becs", "bacs", "book", "card", "check", "cross_border", "eft", "interac", "masav", "neft", "nics", "provxchange", "rtp", "se_bankgirot", "sen", "sepa", "sic", "signet", "wire", "zengin" ],
            "items" : {
              "type" : "string",
              "enum" : [ "ach", "au_becs", "bacs", "book", "card", "check", "cross_border", "eft", "interac", "masav", "neft", "nics", "provxchange", "rtp", "se_bankgirot", "sen", "sepa", "sic", "signet", "wire", "zengin" ]
            }
          },
          "bank_name" : {
            "type" : "string",
            "description" : "The name of the bank."
          },
          "bank_address" : {
            "$ref" : "#/components/schemas/address_request"
          },
          "sanctions" : {
            "type" : "object",
            "description" : "An object containing key-value pairs, each with a sanctions list as the key and a boolean value representing whether the bank is on that particular sanctions list. Currently, this includes eu_con, uk_hmt, us_ofac, and un sanctions lists."
          }
        },
        "additionalProperties" : false
      },
      "incoming_payment_detail_create_request" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "One of `ach`, `wire`, `check`.",
            "enum" : [ "ach", "book", "check", "eft", "interac", "rtp", "sepa", "signet", "wire" ]
          },
          "direction" : {
            "type" : "string",
            "description" : "One of `credit`, `debit`.",
            "enum" : [ "credit", "debit" ]
          },
          "amount" : {
            "type" : "integer",
            "description" : "Value in specified currency's smallest unit. e.g. $10 would be represented as 1000."
          },
          "currency" : {
            "$ref" : "#/components/schemas/currency"
          },
          "internal_account_id" : {
            "type" : "string",
            "description" : "The ID of one of your internal accounts.",
            "format" : "uuid"
          },
          "virtual_account_id" : {
            "type" : "string",
            "description" : "An optional parameter to associate the incoming payment detail to a virtual account.",
            "format" : "uuid",
            "nullable" : true
          },
          "as_of_date" : {
            "type" : "string",
            "description" : "Defaults to today.",
            "format" : "date",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "description" : "Defaults to a random description.",
            "nullable" : true
          }
        }
      },
      "transaction" : {
        "minProperties" : 22,
        "required" : [ "amount", "as_of_date", "as_of_time", "created_at", "currency", "details", "direction", "discarded_at", "id", "internal_account_id", "live_mode", "metadata", "object", "posted", "reconciled", "type", "updated_at", "vendor_code", "vendor_code_type", "vendor_customer_id", "vendor_description", "vendor_id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "discarded_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "amount" : {
            "type" : "integer",
            "description" : "Value in specified currency's smallest unit. e.g. $10 would be represented as 1000."
          },
          "currency" : {
            "$ref" : "#/components/schemas/currency"
          },
          "direction" : {
            "type" : "string",
            "description" : "Either `credit` or `debit`."
          },
          "vendor_description" : {
            "type" : "string",
            "description" : "The transaction detail text that often appears in on your bank statement and in your banking portal.",
            "nullable" : true
          },
          "vendor_code" : {
            "type" : "string",
            "description" : "When applicable, the bank-given code that determines the transaction's category. For most banks this is the BAI2/BTRS transaction code.",
            "nullable" : true
          },
          "vendor_code_type" : {
            "type" : "string",
            "description" : "The type of `vendor_code` being reported. Can be one of `bai2`, `bankprov`, `bnk_dev`, `cleartouch`, `currencycloud`, `cross_river`, `dc_bank`, `dwolla`, `evolve`, `goldman_sachs`, `iso20022`, `jpmc`, `mx`, `signet`, `silvergate`, `swift`, or `us_bank`.",
            "nullable" : true,
            "enum" : [ "bai2", "bankprov", "bnk_dev", "cleartouch", "column", "cross_river", "currencycloud", "dc_bank", "dwolla", "evolve", "goldman_sachs", "iso20022", "jpmc", "mx", "plaid", "rspec_vendor", "signet", "silvergate", "swift", "us_bank" ]
          },
          "vendor_id" : {
            "type" : "string",
            "description" : "An identifier given to this transaction by the bank.",
            "nullable" : true
          },
          "as_of_date" : {
            "type" : "string",
            "description" : "The date on which the transaction occurred.",
            "format" : "date",
            "nullable" : true
          },
          "as_of_time" : {
            "type" : "string",
            "description" : "The time on which the transaction occurred. Depending on the granularity of the timestamp information received from the bank, it may be `null`.",
            "format" : "time",
            "nullable" : true
          },
          "internal_account_id" : {
            "type" : "string",
            "description" : "The ID of the relevant Internal Account.",
            "format" : "uuid"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "posted" : {
            "type" : "boolean",
            "description" : "This field will be `true` if the transaction has posted to the account."
          },
          "vendor_customer_id" : {
            "type" : "string",
            "description" : "An identifier given to this transaction by the bank, often `null`.",
            "nullable" : true
          },
          "reconciled" : {
            "type" : "boolean",
            "description" : "This field will be `true` if a transaction is reconciled by the Modern Treasury system. This means that it has transaction line items that sum up to the transaction's amount."
          },
          "details" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "This field contains additional information that the bank provided about the transaction. This is structured data. Some of the data in here might overlap with what is in the `vendor_description`. For example, the OBI could be a part of the vendor description, and it would also be included in here. The attributes that are passed through the details field will vary based on your banking partner. Currently, the following keys may be in the details object: `originator_name`, `originator_to_beneficiary_information`."
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the transaction. Can be one of `ach`, `wire`, `check`, `rtp`, `book`, or `sen`.",
            "enum" : [ "ach", "au_becs", "bacs", "book", "card", "check", "cross_border", "eft", "interac", "masav", "neft", "nics", "provxchange", "rtp", "se_bankgirot", "sen", "sepa", "sic", "signet", "wire", "zengin" ]
          }
        },
        "additionalProperties" : false
      },
      "transaction_update_request" : {
        "type" : "object",
        "properties" : {
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data in the form of key-value pairs. Pairs can be removed by passing an empty string or `null` as the value."
          }
        }
      },
      "transaction_line_item" : {
        "minProperties" : 14,
        "required" : [ "amount", "counterparty_id", "created_at", "description", "discarded_at", "expected_payment_id", "id", "live_mode", "object", "transactable_id", "transactable_type", "transaction_id", "type", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment, or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "discarded_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "description" : "Indicates whether the line item is `originating` or `receiving` (see https://www.moderntreasury.com/journal/beginners-guide-to-ach for more).",
            "enum" : [ "originating", "receiving" ]
          },
          "transactable_type" : {
            "type" : "string",
            "description" : "If a matching object exists in Modern Treasury, the type will be populated here, otherwise `null`.",
            "nullable" : true,
            "enum" : [ "incoming_payment_detail", "paper_item", "payment_order", "payment_order_attempt", "return", "reversal" ]
          },
          "transactable_id" : {
            "type" : "string",
            "description" : "If a matching object exists in Modern Treasury, the ID will be populated here, otherwise `null`.",
            "nullable" : true
          },
          "amount" : {
            "type" : "integer",
            "description" : "If a matching object exists in Modern Treasury, `amount` will be populated. Value in specified currency's smallest unit (taken from parent Transaction)."
          },
          "description" : {
            "type" : "string",
            "description" : "If no matching object is found, `description` will be a free-form text field describing the line item. This field may contain personally identifiable information (PII) and is not included in API responses by default. Learn more about changing your settings at https://docs.moderntreasury.com/reference/personally-identifiable-information."
          },
          "counterparty_id" : {
            "type" : "string",
            "description" : "The ID for the counterparty for this transaction line item.",
            "nullable" : true
          },
          "expected_payment_id" : {
            "type" : "string",
            "description" : "The ID of the reconciled Expected Payment, otherwise `null`.",
            "nullable" : true
          },
          "transaction_id" : {
            "type" : "string",
            "description" : "The ID of the parent transaction."
          }
        },
        "additionalProperties" : false
      },
      "virtual_account" : {
        "minProperties" : 15,
        "required" : [ "account_details", "counterparty_id", "created_at", "credit_ledger_account_id", "debit_ledger_account_id", "description", "discarded_at", "id", "internal_account_id", "live_mode", "metadata", "name", "object", "routing_details", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "discarded_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the virtual account."
          },
          "description" : {
            "type" : "string",
            "description" : "An optional free-form description for internal use.",
            "nullable" : true
          },
          "counterparty_id" : {
            "type" : "string",
            "description" : "The ID of a counterparty that the virtual account belongs to. Optional.",
            "format" : "uuid",
            "nullable" : true
          },
          "internal_account_id" : {
            "type" : "string",
            "description" : "The ID of the internal account that the virtual account is in.",
            "format" : "uuid"
          },
          "account_details" : {
            "type" : "array",
            "description" : "An array of account detail objects.",
            "items" : {
              "$ref" : "#/components/schemas/account_detail"
            }
          },
          "routing_details" : {
            "type" : "array",
            "description" : "An array of routing detail objects. These will be the routing details of the internal account.",
            "items" : {
              "$ref" : "#/components/schemas/routing_detail"
            }
          },
          "debit_ledger_account_id" : {
            "type" : "string",
            "description" : "The ID of a debit normal ledger account. When money enters the virtual account, this ledger account will be debited. Must be accompanied by a credit_ledger_account_id if present.",
            "format" : "uuid",
            "nullable" : true
          },
          "credit_ledger_account_id" : {
            "type" : "string",
            "description" : "The ID of a credit normal ledger account. When money enters the virtual account, this ledger account will be credited. Must be accompanied by a debit_ledger_account_id if present.",
            "format" : "uuid",
            "nullable" : true
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          }
        },
        "additionalProperties" : false
      },
      "virtual_account_create_request" : {
        "required" : [ "internal_account_id", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the virtual account."
          },
          "description" : {
            "type" : "string",
            "description" : "An optional description for internal use."
          },
          "counterparty_id" : {
            "type" : "string",
            "description" : "The ID of the counterparty that the virtual account belongs to.",
            "format" : "uuid"
          },
          "internal_account_id" : {
            "type" : "string",
            "description" : "The ID of the internal account that this virtual account is associated with.",
            "format" : "uuid"
          },
          "account_details" : {
            "type" : "array",
            "description" : "An array of account detail objects.",
            "items" : {
              "$ref" : "#/components/schemas/account_detail_create_request"
            }
          },
          "routing_details" : {
            "type" : "array",
            "description" : "An array of routing detail objects.",
            "items" : {
              "$ref" : "#/components/schemas/routing_detail_create_request"
            }
          },
          "debit_ledger_account_id" : {
            "type" : "string",
            "description" : "The ID of a debit normal ledger account. When money enters the virtual account, this ledger account will be debited. Must be accompanied by a credit_ledger_account_id if present.",
            "format" : "uuid"
          },
          "credit_ledger_account_id" : {
            "type" : "string",
            "description" : "The ID of a credit normal ledger account. When money leaves the virtual account, this ledger account will be credited. Must be accompanied by a debit_ledger_account_id if present.",
            "format" : "uuid"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings."
          }
        }
      },
      "virtual_account_update_request" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "counterparty_id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      },
      "balances" : {
        "type" : "object",
        "properties" : {
          "effective_at" : {
            "type" : "string",
            "format" : "date-time"
          }
        },
        "additionalProperties" : false
      },
      "balances_1" : {
        "type" : "object",
        "properties" : {
          "as_of_date" : {
            "type" : "string",
            "format" : "date"
          },
          "effective_at" : {
            "type" : "string",
            "format" : "date-time"
          }
        },
        "additionalProperties" : false
      },
      "balances_2" : {
        "type" : "object",
        "properties" : {
          "as_of_date" : {
            "type" : "string",
            "format" : "date"
          },
          "effective_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "effective_at_lower_bound" : {
            "type" : "string",
            "format" : "date-time"
          },
          "effective_at_upper_bound" : {
            "type" : "string",
            "format" : "date-time"
          }
        },
        "additionalProperties" : false
      },
      "pending_balance_amount" : {
        "type" : "object",
        "properties" : {
          "gt" : {
            "type" : "integer"
          },
          "lt" : {
            "type" : "integer"
          },
          "gte" : {
            "type" : "integer"
          },
          "lte" : {
            "type" : "integer"
          },
          "eq" : {
            "type" : "integer"
          },
          "not_eq" : {
            "type" : "integer"
          }
        },
        "additionalProperties" : false
      },
      "posted_balance_amount" : {
        "type" : "object",
        "properties" : {
          "gt" : {
            "type" : "integer"
          },
          "lt" : {
            "type" : "integer"
          },
          "gte" : {
            "type" : "integer"
          },
          "lte" : {
            "type" : "integer"
          },
          "eq" : {
            "type" : "integer"
          },
          "not_eq" : {
            "type" : "integer"
          }
        },
        "additionalProperties" : false
      },
      "available_balance_amount" : {
        "type" : "object",
        "properties" : {
          "gt" : {
            "type" : "integer"
          },
          "lt" : {
            "type" : "integer"
          },
          "gte" : {
            "type" : "integer"
          },
          "lte" : {
            "type" : "integer"
          },
          "eq" : {
            "type" : "integer"
          },
          "not_eq" : {
            "type" : "integer"
          }
        },
        "additionalProperties" : false
      },
      "balances_3" : {
        "type" : "object",
        "properties" : {
          "as_of_date" : {
            "type" : "string",
            "format" : "date"
          },
          "effective_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "effective_at_lower_bound" : {
            "type" : "string",
            "format" : "date-time"
          },
          "effective_at_upper_bound" : {
            "type" : "string",
            "format" : "date-time"
          },
          "as_of_lock_version" : {
            "type" : "integer"
          }
        },
        "additionalProperties" : false
      },
      "order_by" : {
        "type" : "object",
        "properties" : {
          "created_at" : {
            "type" : "string",
            "enum" : [ "asc", "desc" ]
          },
          "effective_at" : {
            "type" : "string",
            "enum" : [ "asc", "desc" ]
          }
        },
        "additionalProperties" : false
      },
      "order_by_1" : {
        "type" : "object",
        "properties" : {
          "created_at" : {
            "type" : "string",
            "enum" : [ "asc", "desc" ]
          },
          "effective_at" : {
            "type" : "string",
            "enum" : [ "asc", "desc" ]
          }
        },
        "additionalProperties" : false
      },
      "counterparty_accounts" : {
        "minProperties" : 17,
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "object" : {
            "type" : "string"
          },
          "live_mode" : {
            "type" : "boolean",
            "description" : "This field will be true if this object exists in the live environment or false if it exists in the test environment."
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "discarded_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "account_type" : {
            "type" : "string",
            "description" : "Can be `checking`, `savings` or `other`.",
            "enum" : [ "cash", "checking", "loan", "non_resident", "other", "overdraft", "savings" ]
          },
          "party_type" : {
            "type" : "string",
            "description" : "Either `individual` or `business`.",
            "nullable" : true,
            "enum" : [ "business", "individual" ]
          },
          "party_address" : {
            "$ref" : "#/components/schemas/address"
          },
          "name" : {
            "type" : "string",
            "description" : "A nickname for the external account. This is only for internal usage and won't affect any payments",
            "nullable" : true
          },
          "account_details" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/account_detail"
            }
          },
          "routing_details" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/routing_detail"
            }
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "party_name" : {
            "type" : "string",
            "description" : "The legal name of the entity which owns the account."
          },
          "contact_details" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/contact_detail"
            }
          },
          "ledger_account_id" : {
            "type" : "string",
            "description" : "If the external account links to a ledger account in Modern Treasury, the id of the ledger account will be populated here.",
            "format" : "uuid",
            "nullable" : true
          },
          "verification_status" : {
            "type" : "string",
            "enum" : [ "pending_verification", "unverified", "verified" ]
          }
        },
        "additionalProperties" : false
      },
      "counterparty_create_request_account_details" : {
        "required" : [ "account_number" ],
        "type" : "object",
        "properties" : {
          "account_number" : {
            "type" : "string"
          },
          "account_number_type" : {
            "type" : "string",
            "enum" : [ "iban", "clabe", "wallet_address", "pan", "other" ]
          }
        }
      },
      "counterparty_create_request_routing_details" : {
        "required" : [ "routing_number", "routing_number_type" ],
        "type" : "object",
        "properties" : {
          "routing_number" : {
            "type" : "string"
          },
          "routing_number_type" : {
            "type" : "string",
            "enum" : [ "aba", "au_bsb", "se_bankgiro_clearing_code", "br_codigo", "ca_cpa", "chips", "cnaps", "gb_sort_code", "in_ifsc", "my_branch_code", "swift", "jp_zengin_code" ]
          },
          "payment_type" : {
            "type" : "string",
            "enum" : [ "ach", "au_becs", "se_bankgirot", "bacs", "book", "card", "check", "eft", "cross_border", "interac", "masav", "neft", "nics", "provxchange", "rtp", "sen", "sic", "sepa", "signet", "wire", "zengin" ]
          }
        }
      },
      "counterparty_create_request_accounts" : {
        "type" : "object",
        "properties" : {
          "account_type" : {
            "type" : "string",
            "description" : "Can be `checking`, `savings` or `other`.",
            "enum" : [ "cash", "checking", "loan", "non_resident", "other", "overdraft", "savings" ]
          },
          "party_type" : {
            "type" : "string",
            "description" : "Either `individual` or `business`.",
            "nullable" : true,
            "enum" : [ "business", "individual" ]
          },
          "party_address" : {
            "$ref" : "#/components/schemas/address_request"
          },
          "name" : {
            "type" : "string",
            "description" : "A nickname for the external account. This is only for internal usage and won't affect any payments",
            "nullable" : true
          },
          "account_details" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/counterparty_create_request_account_details"
            }
          },
          "routing_details" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/counterparty_create_request_routing_details"
            }
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "party_name" : {
            "type" : "string",
            "description" : "If this value isn't provided, it will be inherited from the counterparty's name."
          },
          "party_identifier" : {
            "type" : "string"
          },
          "ledger_account" : {
            "$ref" : "#/components/schemas/ledger_account_create_request"
          },
          "plaid_processor_token" : {
            "type" : "string",
            "description" : "If you've enabled the Modern Treasury + Plaid integration in your Plaid account, you can pass the processor token in this field."
          },
          "contact_details" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/contact_detail_create_request"
            }
          }
        }
      },
      "counterparty_create_request_accounting" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "An optional type to auto-sync the counterparty to your ledger. Either `customer` or `vendor`.",
            "enum" : [ "customer", "vendor" ]
          }
        }
      },
      "document_file" : {
        "minProperties" : 3,
        "type" : "object",
        "properties" : {
          "size" : {
            "type" : "integer",
            "description" : "The size of the document in bytes."
          },
          "filename" : {
            "type" : "string",
            "description" : "The original filename of the document."
          },
          "content_type" : {
            "type" : "string",
            "description" : "The MIME content type of the document."
          }
        },
        "additionalProperties" : false
      },
      "error_message_errors" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "enum" : [ "parameter_invalid", "parameter_missing", "resource_not_found", "not_found", "forbidden", "invalid_ip", "invalid_key", "header_invalid", "expired_key", "too_many_requests" ]
          },
          "message" : {
            "type" : "string"
          },
          "parameter" : {
            "type" : "string"
          }
        }
      },
      "internal_account_create_request_party_address" : {
        "required" : [ "country", "line1", "locality", "postal_code", "region" ],
        "type" : "object",
        "properties" : {
          "line1" : {
            "type" : "string"
          },
          "line2" : {
            "type" : "string"
          },
          "locality" : {
            "type" : "string",
            "description" : "Locality or City."
          },
          "region" : {
            "type" : "string",
            "description" : "Region or State."
          },
          "postal_code" : {
            "type" : "string",
            "description" : "The postal code of the address."
          },
          "country" : {
            "type" : "string",
            "description" : "Country code conforms to [ISO 3166-1 alpha-2]"
          }
        },
        "description" : "The address associated with the owner or null."
      },
      "invoice_counterparty_billing_address" : {
        "required" : [ "country", "line1", "locality", "postal_code", "region" ],
        "type" : "object",
        "properties" : {
          "line1" : {
            "type" : "string"
          },
          "line2" : {
            "type" : "string"
          },
          "locality" : {
            "type" : "string",
            "description" : "Locality or City."
          },
          "region" : {
            "type" : "string",
            "description" : "Region or State."
          },
          "postal_code" : {
            "type" : "string",
            "description" : "The postal code of the address."
          },
          "country" : {
            "type" : "string",
            "description" : "Country code conforms to [ISO 3166-1 alpha-2]"
          }
        },
        "description" : "The counterparty's billing address.",
        "nullable" : true
      },
      "invoice_counterparty_shipping_address" : {
        "required" : [ "country", "line1", "locality", "postal_code", "region" ],
        "type" : "object",
        "properties" : {
          "line1" : {
            "type" : "string"
          },
          "line2" : {
            "type" : "string"
          },
          "locality" : {
            "type" : "string",
            "description" : "Locality or City."
          },
          "region" : {
            "type" : "string",
            "description" : "Region or State."
          },
          "postal_code" : {
            "type" : "string",
            "description" : "The postal code of the address."
          },
          "country" : {
            "type" : "string",
            "description" : "Country code conforms to [ISO 3166-1 alpha-2]"
          }
        },
        "description" : "The counterparty's shipping address where physical goods should be delivered.",
        "nullable" : true
      },
      "invoice_invoicer_address" : {
        "required" : [ "country", "line1", "locality", "postal_code", "region" ],
        "type" : "object",
        "properties" : {
          "line1" : {
            "type" : "string"
          },
          "line2" : {
            "type" : "string"
          },
          "locality" : {
            "type" : "string",
            "description" : "Locality or City."
          },
          "region" : {
            "type" : "string",
            "description" : "Region or State."
          },
          "postal_code" : {
            "type" : "string",
            "description" : "The postal code of the address."
          },
          "country" : {
            "type" : "string",
            "description" : "Country code conforms to [ISO 3166-1 alpha-2]"
          }
        },
        "description" : "The invoice issuer's business address.",
        "nullable" : true
      },
      "payment_order_create_request_receiving_account" : {
        "type" : "object",
        "properties" : {
          "account_type" : {
            "type" : "string",
            "description" : "Can be `checking`, `savings` or `other`.",
            "enum" : [ "cash", "checking", "loan", "non_resident", "other", "overdraft", "savings" ]
          },
          "party_type" : {
            "type" : "string",
            "description" : "Either `individual` or `business`.",
            "nullable" : true,
            "enum" : [ "business", "individual" ]
          },
          "party_address" : {
            "$ref" : "#/components/schemas/address_request"
          },
          "name" : {
            "type" : "string",
            "description" : "A nickname for the external account. This is only for internal usage and won't affect any payments",
            "nullable" : true
          },
          "account_details" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/counterparty_create_request_account_details"
            }
          },
          "routing_details" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/counterparty_create_request_routing_details"
            }
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional data represented as key-value pairs. Both the key and value must be strings.",
            "example" : {
              "key" : "value",
              "foo" : "bar",
              "modern" : "treasury"
            }
          },
          "party_name" : {
            "type" : "string",
            "description" : "If this value isn't provided, it will be inherited from the counterparty's name."
          },
          "party_identifier" : {
            "type" : "string"
          },
          "ledger_account" : {
            "$ref" : "#/components/schemas/ledger_account_create_request"
          },
          "plaid_processor_token" : {
            "type" : "string",
            "description" : "If you've enabled the Modern Treasury + Plaid integration in your Plaid account, you can pass the processor token in this field."
          },
          "contact_details" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/contact_detail_create_request"
            }
          }
        },
        "description" : "Either `receiving_account` or `receiving_account_id` must be present. When using `receiving_account_id`, you may pass the id of an external account or an internal account."
      }
    },
    "parameters" : {
      "metadata_query" : {
        "name" : "metadata",
        "in" : "query",
        "description" : "For example, if you want to query for records with metadata key `Type` and value `Loan`, the query would be `metadata%5BType%5D=Loan`. This encodes the query parameters.",
        "required" : false,
        "style" : "deepObject",
        "explode" : true,
        "schema" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      },
      "bulk_id" : {
        "name" : "id[]",
        "in" : "query",
        "description" : "If you have specific IDs to retrieve in bulk, you can pass them as query parameters delimited with `id[]=`, for example `?id[]=123&id[]=abc`.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "allowReserved" : true,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "securitySchemes" : {
      "basic_auth" : {
        "type" : "http",
        "scheme" : "basic"
      }
    }
  }
}